// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.174.0
//   protoc               v4.25.1
// source: sip_gateway.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";

export const protobufPackage = "sip_gateway";

export interface IncomingCallData {
  event?: IncomingCallData_IncomingCallEvent | undefined;
  request?: IncomingCallData_IncomingCallRequest | undefined;
  response?: IncomingCallData_IncomingCallResponse | undefined;
}

export interface IncomingCallData_IncomingCallEvent {
  err?: IncomingCallData_IncomingCallEvent_Error | undefined;
  sip?: IncomingCallData_IncomingCallEvent_SipEvent | undefined;
  accepted?: IncomingCallData_IncomingCallEvent_Accepted | undefined;
  ended?: IncomingCallData_IncomingCallEvent_Ended | undefined;
}

export interface IncomingCallData_IncomingCallEvent_SipEvent {
  cancelled?: IncomingCallData_IncomingCallEvent_SipEvent_Cancelled | undefined;
  bye?: IncomingCallData_IncomingCallEvent_SipEvent_Bye | undefined;
}

export interface IncomingCallData_IncomingCallEvent_SipEvent_Cancelled {
}

export interface IncomingCallData_IncomingCallEvent_SipEvent_Bye {
}

export interface IncomingCallData_IncomingCallEvent_Accepted {
}

export interface IncomingCallData_IncomingCallEvent_Ended {
}

export interface IncomingCallData_IncomingCallEvent_Error {
  message: string;
}

export interface IncomingCallData_IncomingCallRequest {
  reqId: number;
  ring?: IncomingCallData_IncomingCallRequest_Ring | undefined;
  accept?: IncomingCallData_IncomingCallRequest_Accept | undefined;
  end?: IncomingCallData_IncomingCallRequest_End | undefined;
}

export interface IncomingCallData_IncomingCallRequest_Ring {
}

export interface IncomingCallData_IncomingCallRequest_Accept {
  room: string;
  peer: string;
  record: boolean;
}

export interface IncomingCallData_IncomingCallRequest_End {
}

export interface IncomingCallData_IncomingCallResponse {
  reqId: number;
  error?: IncomingCallData_IncomingCallResponse_Error | undefined;
  ring?: IncomingCallData_IncomingCallResponse_Ring | undefined;
  accept?: IncomingCallData_IncomingCallResponse_Accept | undefined;
  end?: IncomingCallData_IncomingCallResponse_End | undefined;
}

export interface IncomingCallData_IncomingCallResponse_Ring {
}

export interface IncomingCallData_IncomingCallResponse_Accept {
}

export interface IncomingCallData_IncomingCallResponse_End {
}

export interface IncomingCallData_IncomingCallResponse_Error {
  message: string;
}

export interface OutgoingCallData {
  event?: OutgoingCallData_OutgoingCallEvent | undefined;
  request?: OutgoingCallData_OutgoingCallRequest | undefined;
  response?: OutgoingCallData_OutgoingCallResponse | undefined;
}

export interface OutgoingCallData_OutgoingCallEvent {
  err?: OutgoingCallData_OutgoingCallEvent_Error | undefined;
  sip?: OutgoingCallData_OutgoingCallEvent_SipEvent | undefined;
  ended?: OutgoingCallData_OutgoingCallEvent_Ended | undefined;
}

export interface OutgoingCallData_OutgoingCallEvent_SipEvent {
  provisional?: OutgoingCallData_OutgoingCallEvent_SipEvent_Provisional | undefined;
  early?: OutgoingCallData_OutgoingCallEvent_SipEvent_Early | undefined;
  accepted?: OutgoingCallData_OutgoingCallEvent_SipEvent_Accepted | undefined;
  failure?: OutgoingCallData_OutgoingCallEvent_SipEvent_Failure | undefined;
  bye?: OutgoingCallData_OutgoingCallEvent_SipEvent_Bye | undefined;
}

export interface OutgoingCallData_OutgoingCallEvent_SipEvent_Provisional {
  code: number;
}

export interface OutgoingCallData_OutgoingCallEvent_SipEvent_Early {
  code: number;
}

export interface OutgoingCallData_OutgoingCallEvent_SipEvent_Accepted {
  code: number;
}

export interface OutgoingCallData_OutgoingCallEvent_SipEvent_Failure {
  code: number;
}

export interface OutgoingCallData_OutgoingCallEvent_SipEvent_Bye {
}

export interface OutgoingCallData_OutgoingCallEvent_Ended {
}

export interface OutgoingCallData_OutgoingCallEvent_Error {
  message: string;
}

export interface OutgoingCallData_OutgoingCallRequest {
  reqId: number;
  end?: OutgoingCallData_OutgoingCallRequest_End | undefined;
}

export interface OutgoingCallData_OutgoingCallRequest_End {
}

export interface OutgoingCallData_OutgoingCallResponse {
  reqId: number;
  error?: OutgoingCallData_OutgoingCallResponse_Error | undefined;
  end?: OutgoingCallData_OutgoingCallResponse_End | undefined;
}

export interface OutgoingCallData_OutgoingCallResponse_End {
}

export interface OutgoingCallData_OutgoingCallResponse_Error {
  message: string;
}

function createBaseIncomingCallData(): IncomingCallData {
  return { event: undefined, request: undefined, response: undefined };
}

export const IncomingCallData = {
  encode(message: IncomingCallData, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.event !== undefined) {
      IncomingCallData_IncomingCallEvent.encode(message.event, writer.uint32(10).fork()).ldelim();
    }
    if (message.request !== undefined) {
      IncomingCallData_IncomingCallRequest.encode(message.request, writer.uint32(18).fork()).ldelim();
    }
    if (message.response !== undefined) {
      IncomingCallData_IncomingCallResponse.encode(message.response, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): IncomingCallData {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIncomingCallData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.event = IncomingCallData_IncomingCallEvent.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.request = IncomingCallData_IncomingCallRequest.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.response = IncomingCallData_IncomingCallResponse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IncomingCallData {
    return {
      event: isSet(object.event) ? IncomingCallData_IncomingCallEvent.fromJSON(object.event) : undefined,
      request: isSet(object.request) ? IncomingCallData_IncomingCallRequest.fromJSON(object.request) : undefined,
      response: isSet(object.response) ? IncomingCallData_IncomingCallResponse.fromJSON(object.response) : undefined,
    };
  },

  toJSON(message: IncomingCallData): unknown {
    const obj: any = {};
    if (message.event !== undefined) {
      obj.event = IncomingCallData_IncomingCallEvent.toJSON(message.event);
    }
    if (message.request !== undefined) {
      obj.request = IncomingCallData_IncomingCallRequest.toJSON(message.request);
    }
    if (message.response !== undefined) {
      obj.response = IncomingCallData_IncomingCallResponse.toJSON(message.response);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IncomingCallData>, I>>(base?: I): IncomingCallData {
    return IncomingCallData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IncomingCallData>, I>>(object: I): IncomingCallData {
    const message = createBaseIncomingCallData();
    message.event = (object.event !== undefined && object.event !== null)
      ? IncomingCallData_IncomingCallEvent.fromPartial(object.event)
      : undefined;
    message.request = (object.request !== undefined && object.request !== null)
      ? IncomingCallData_IncomingCallRequest.fromPartial(object.request)
      : undefined;
    message.response = (object.response !== undefined && object.response !== null)
      ? IncomingCallData_IncomingCallResponse.fromPartial(object.response)
      : undefined;
    return message;
  },
};

function createBaseIncomingCallData_IncomingCallEvent(): IncomingCallData_IncomingCallEvent {
  return { err: undefined, sip: undefined, accepted: undefined, ended: undefined };
}

export const IncomingCallData_IncomingCallEvent = {
  encode(message: IncomingCallData_IncomingCallEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.err !== undefined) {
      IncomingCallData_IncomingCallEvent_Error.encode(message.err, writer.uint32(10).fork()).ldelim();
    }
    if (message.sip !== undefined) {
      IncomingCallData_IncomingCallEvent_SipEvent.encode(message.sip, writer.uint32(18).fork()).ldelim();
    }
    if (message.accepted !== undefined) {
      IncomingCallData_IncomingCallEvent_Accepted.encode(message.accepted, writer.uint32(26).fork()).ldelim();
    }
    if (message.ended !== undefined) {
      IncomingCallData_IncomingCallEvent_Ended.encode(message.ended, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): IncomingCallData_IncomingCallEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIncomingCallData_IncomingCallEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.err = IncomingCallData_IncomingCallEvent_Error.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.sip = IncomingCallData_IncomingCallEvent_SipEvent.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.accepted = IncomingCallData_IncomingCallEvent_Accepted.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.ended = IncomingCallData_IncomingCallEvent_Ended.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IncomingCallData_IncomingCallEvent {
    return {
      err: isSet(object.err) ? IncomingCallData_IncomingCallEvent_Error.fromJSON(object.err) : undefined,
      sip: isSet(object.sip) ? IncomingCallData_IncomingCallEvent_SipEvent.fromJSON(object.sip) : undefined,
      accepted: isSet(object.accepted)
        ? IncomingCallData_IncomingCallEvent_Accepted.fromJSON(object.accepted)
        : undefined,
      ended: isSet(object.ended) ? IncomingCallData_IncomingCallEvent_Ended.fromJSON(object.ended) : undefined,
    };
  },

  toJSON(message: IncomingCallData_IncomingCallEvent): unknown {
    const obj: any = {};
    if (message.err !== undefined) {
      obj.err = IncomingCallData_IncomingCallEvent_Error.toJSON(message.err);
    }
    if (message.sip !== undefined) {
      obj.sip = IncomingCallData_IncomingCallEvent_SipEvent.toJSON(message.sip);
    }
    if (message.accepted !== undefined) {
      obj.accepted = IncomingCallData_IncomingCallEvent_Accepted.toJSON(message.accepted);
    }
    if (message.ended !== undefined) {
      obj.ended = IncomingCallData_IncomingCallEvent_Ended.toJSON(message.ended);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IncomingCallData_IncomingCallEvent>, I>>(
    base?: I,
  ): IncomingCallData_IncomingCallEvent {
    return IncomingCallData_IncomingCallEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IncomingCallData_IncomingCallEvent>, I>>(
    object: I,
  ): IncomingCallData_IncomingCallEvent {
    const message = createBaseIncomingCallData_IncomingCallEvent();
    message.err = (object.err !== undefined && object.err !== null)
      ? IncomingCallData_IncomingCallEvent_Error.fromPartial(object.err)
      : undefined;
    message.sip = (object.sip !== undefined && object.sip !== null)
      ? IncomingCallData_IncomingCallEvent_SipEvent.fromPartial(object.sip)
      : undefined;
    message.accepted = (object.accepted !== undefined && object.accepted !== null)
      ? IncomingCallData_IncomingCallEvent_Accepted.fromPartial(object.accepted)
      : undefined;
    message.ended = (object.ended !== undefined && object.ended !== null)
      ? IncomingCallData_IncomingCallEvent_Ended.fromPartial(object.ended)
      : undefined;
    return message;
  },
};

function createBaseIncomingCallData_IncomingCallEvent_SipEvent(): IncomingCallData_IncomingCallEvent_SipEvent {
  return { cancelled: undefined, bye: undefined };
}

export const IncomingCallData_IncomingCallEvent_SipEvent = {
  encode(message: IncomingCallData_IncomingCallEvent_SipEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.cancelled !== undefined) {
      IncomingCallData_IncomingCallEvent_SipEvent_Cancelled.encode(message.cancelled, writer.uint32(10).fork())
        .ldelim();
    }
    if (message.bye !== undefined) {
      IncomingCallData_IncomingCallEvent_SipEvent_Bye.encode(message.bye, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): IncomingCallData_IncomingCallEvent_SipEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIncomingCallData_IncomingCallEvent_SipEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.cancelled = IncomingCallData_IncomingCallEvent_SipEvent_Cancelled.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.bye = IncomingCallData_IncomingCallEvent_SipEvent_Bye.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IncomingCallData_IncomingCallEvent_SipEvent {
    return {
      cancelled: isSet(object.cancelled)
        ? IncomingCallData_IncomingCallEvent_SipEvent_Cancelled.fromJSON(object.cancelled)
        : undefined,
      bye: isSet(object.bye) ? IncomingCallData_IncomingCallEvent_SipEvent_Bye.fromJSON(object.bye) : undefined,
    };
  },

  toJSON(message: IncomingCallData_IncomingCallEvent_SipEvent): unknown {
    const obj: any = {};
    if (message.cancelled !== undefined) {
      obj.cancelled = IncomingCallData_IncomingCallEvent_SipEvent_Cancelled.toJSON(message.cancelled);
    }
    if (message.bye !== undefined) {
      obj.bye = IncomingCallData_IncomingCallEvent_SipEvent_Bye.toJSON(message.bye);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IncomingCallData_IncomingCallEvent_SipEvent>, I>>(
    base?: I,
  ): IncomingCallData_IncomingCallEvent_SipEvent {
    return IncomingCallData_IncomingCallEvent_SipEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IncomingCallData_IncomingCallEvent_SipEvent>, I>>(
    object: I,
  ): IncomingCallData_IncomingCallEvent_SipEvent {
    const message = createBaseIncomingCallData_IncomingCallEvent_SipEvent();
    message.cancelled = (object.cancelled !== undefined && object.cancelled !== null)
      ? IncomingCallData_IncomingCallEvent_SipEvent_Cancelled.fromPartial(object.cancelled)
      : undefined;
    message.bye = (object.bye !== undefined && object.bye !== null)
      ? IncomingCallData_IncomingCallEvent_SipEvent_Bye.fromPartial(object.bye)
      : undefined;
    return message;
  },
};

function createBaseIncomingCallData_IncomingCallEvent_SipEvent_Cancelled(): IncomingCallData_IncomingCallEvent_SipEvent_Cancelled {
  return {};
}

export const IncomingCallData_IncomingCallEvent_SipEvent_Cancelled = {
  encode(
    _: IncomingCallData_IncomingCallEvent_SipEvent_Cancelled,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): IncomingCallData_IncomingCallEvent_SipEvent_Cancelled {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIncomingCallData_IncomingCallEvent_SipEvent_Cancelled();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): IncomingCallData_IncomingCallEvent_SipEvent_Cancelled {
    return {};
  },

  toJSON(_: IncomingCallData_IncomingCallEvent_SipEvent_Cancelled): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<IncomingCallData_IncomingCallEvent_SipEvent_Cancelled>, I>>(
    base?: I,
  ): IncomingCallData_IncomingCallEvent_SipEvent_Cancelled {
    return IncomingCallData_IncomingCallEvent_SipEvent_Cancelled.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IncomingCallData_IncomingCallEvent_SipEvent_Cancelled>, I>>(
    _: I,
  ): IncomingCallData_IncomingCallEvent_SipEvent_Cancelled {
    const message = createBaseIncomingCallData_IncomingCallEvent_SipEvent_Cancelled();
    return message;
  },
};

function createBaseIncomingCallData_IncomingCallEvent_SipEvent_Bye(): IncomingCallData_IncomingCallEvent_SipEvent_Bye {
  return {};
}

export const IncomingCallData_IncomingCallEvent_SipEvent_Bye = {
  encode(_: IncomingCallData_IncomingCallEvent_SipEvent_Bye, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): IncomingCallData_IncomingCallEvent_SipEvent_Bye {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIncomingCallData_IncomingCallEvent_SipEvent_Bye();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): IncomingCallData_IncomingCallEvent_SipEvent_Bye {
    return {};
  },

  toJSON(_: IncomingCallData_IncomingCallEvent_SipEvent_Bye): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<IncomingCallData_IncomingCallEvent_SipEvent_Bye>, I>>(
    base?: I,
  ): IncomingCallData_IncomingCallEvent_SipEvent_Bye {
    return IncomingCallData_IncomingCallEvent_SipEvent_Bye.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IncomingCallData_IncomingCallEvent_SipEvent_Bye>, I>>(
    _: I,
  ): IncomingCallData_IncomingCallEvent_SipEvent_Bye {
    const message = createBaseIncomingCallData_IncomingCallEvent_SipEvent_Bye();
    return message;
  },
};

function createBaseIncomingCallData_IncomingCallEvent_Accepted(): IncomingCallData_IncomingCallEvent_Accepted {
  return {};
}

export const IncomingCallData_IncomingCallEvent_Accepted = {
  encode(_: IncomingCallData_IncomingCallEvent_Accepted, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): IncomingCallData_IncomingCallEvent_Accepted {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIncomingCallData_IncomingCallEvent_Accepted();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): IncomingCallData_IncomingCallEvent_Accepted {
    return {};
  },

  toJSON(_: IncomingCallData_IncomingCallEvent_Accepted): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<IncomingCallData_IncomingCallEvent_Accepted>, I>>(
    base?: I,
  ): IncomingCallData_IncomingCallEvent_Accepted {
    return IncomingCallData_IncomingCallEvent_Accepted.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IncomingCallData_IncomingCallEvent_Accepted>, I>>(
    _: I,
  ): IncomingCallData_IncomingCallEvent_Accepted {
    const message = createBaseIncomingCallData_IncomingCallEvent_Accepted();
    return message;
  },
};

function createBaseIncomingCallData_IncomingCallEvent_Ended(): IncomingCallData_IncomingCallEvent_Ended {
  return {};
}

export const IncomingCallData_IncomingCallEvent_Ended = {
  encode(_: IncomingCallData_IncomingCallEvent_Ended, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): IncomingCallData_IncomingCallEvent_Ended {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIncomingCallData_IncomingCallEvent_Ended();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): IncomingCallData_IncomingCallEvent_Ended {
    return {};
  },

  toJSON(_: IncomingCallData_IncomingCallEvent_Ended): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<IncomingCallData_IncomingCallEvent_Ended>, I>>(
    base?: I,
  ): IncomingCallData_IncomingCallEvent_Ended {
    return IncomingCallData_IncomingCallEvent_Ended.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IncomingCallData_IncomingCallEvent_Ended>, I>>(
    _: I,
  ): IncomingCallData_IncomingCallEvent_Ended {
    const message = createBaseIncomingCallData_IncomingCallEvent_Ended();
    return message;
  },
};

function createBaseIncomingCallData_IncomingCallEvent_Error(): IncomingCallData_IncomingCallEvent_Error {
  return { message: "" };
}

export const IncomingCallData_IncomingCallEvent_Error = {
  encode(message: IncomingCallData_IncomingCallEvent_Error, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): IncomingCallData_IncomingCallEvent_Error {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIncomingCallData_IncomingCallEvent_Error();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IncomingCallData_IncomingCallEvent_Error {
    return { message: isSet(object.message) ? globalThis.String(object.message) : "" };
  },

  toJSON(message: IncomingCallData_IncomingCallEvent_Error): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IncomingCallData_IncomingCallEvent_Error>, I>>(
    base?: I,
  ): IncomingCallData_IncomingCallEvent_Error {
    return IncomingCallData_IncomingCallEvent_Error.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IncomingCallData_IncomingCallEvent_Error>, I>>(
    object: I,
  ): IncomingCallData_IncomingCallEvent_Error {
    const message = createBaseIncomingCallData_IncomingCallEvent_Error();
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseIncomingCallData_IncomingCallRequest(): IncomingCallData_IncomingCallRequest {
  return { reqId: 0, ring: undefined, accept: undefined, end: undefined };
}

export const IncomingCallData_IncomingCallRequest = {
  encode(message: IncomingCallData_IncomingCallRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.reqId !== 0) {
      writer.uint32(8).uint32(message.reqId);
    }
    if (message.ring !== undefined) {
      IncomingCallData_IncomingCallRequest_Ring.encode(message.ring, writer.uint32(82).fork()).ldelim();
    }
    if (message.accept !== undefined) {
      IncomingCallData_IncomingCallRequest_Accept.encode(message.accept, writer.uint32(90).fork()).ldelim();
    }
    if (message.end !== undefined) {
      IncomingCallData_IncomingCallRequest_End.encode(message.end, writer.uint32(98).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): IncomingCallData_IncomingCallRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIncomingCallData_IncomingCallRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.reqId = reader.uint32();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.ring = IncomingCallData_IncomingCallRequest_Ring.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.accept = IncomingCallData_IncomingCallRequest_Accept.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.end = IncomingCallData_IncomingCallRequest_End.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IncomingCallData_IncomingCallRequest {
    return {
      reqId: isSet(object.reqId) ? globalThis.Number(object.reqId) : 0,
      ring: isSet(object.ring) ? IncomingCallData_IncomingCallRequest_Ring.fromJSON(object.ring) : undefined,
      accept: isSet(object.accept) ? IncomingCallData_IncomingCallRequest_Accept.fromJSON(object.accept) : undefined,
      end: isSet(object.end) ? IncomingCallData_IncomingCallRequest_End.fromJSON(object.end) : undefined,
    };
  },

  toJSON(message: IncomingCallData_IncomingCallRequest): unknown {
    const obj: any = {};
    if (message.reqId !== 0) {
      obj.reqId = Math.round(message.reqId);
    }
    if (message.ring !== undefined) {
      obj.ring = IncomingCallData_IncomingCallRequest_Ring.toJSON(message.ring);
    }
    if (message.accept !== undefined) {
      obj.accept = IncomingCallData_IncomingCallRequest_Accept.toJSON(message.accept);
    }
    if (message.end !== undefined) {
      obj.end = IncomingCallData_IncomingCallRequest_End.toJSON(message.end);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IncomingCallData_IncomingCallRequest>, I>>(
    base?: I,
  ): IncomingCallData_IncomingCallRequest {
    return IncomingCallData_IncomingCallRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IncomingCallData_IncomingCallRequest>, I>>(
    object: I,
  ): IncomingCallData_IncomingCallRequest {
    const message = createBaseIncomingCallData_IncomingCallRequest();
    message.reqId = object.reqId ?? 0;
    message.ring = (object.ring !== undefined && object.ring !== null)
      ? IncomingCallData_IncomingCallRequest_Ring.fromPartial(object.ring)
      : undefined;
    message.accept = (object.accept !== undefined && object.accept !== null)
      ? IncomingCallData_IncomingCallRequest_Accept.fromPartial(object.accept)
      : undefined;
    message.end = (object.end !== undefined && object.end !== null)
      ? IncomingCallData_IncomingCallRequest_End.fromPartial(object.end)
      : undefined;
    return message;
  },
};

function createBaseIncomingCallData_IncomingCallRequest_Ring(): IncomingCallData_IncomingCallRequest_Ring {
  return {};
}

export const IncomingCallData_IncomingCallRequest_Ring = {
  encode(_: IncomingCallData_IncomingCallRequest_Ring, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): IncomingCallData_IncomingCallRequest_Ring {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIncomingCallData_IncomingCallRequest_Ring();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): IncomingCallData_IncomingCallRequest_Ring {
    return {};
  },

  toJSON(_: IncomingCallData_IncomingCallRequest_Ring): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<IncomingCallData_IncomingCallRequest_Ring>, I>>(
    base?: I,
  ): IncomingCallData_IncomingCallRequest_Ring {
    return IncomingCallData_IncomingCallRequest_Ring.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IncomingCallData_IncomingCallRequest_Ring>, I>>(
    _: I,
  ): IncomingCallData_IncomingCallRequest_Ring {
    const message = createBaseIncomingCallData_IncomingCallRequest_Ring();
    return message;
  },
};

function createBaseIncomingCallData_IncomingCallRequest_Accept(): IncomingCallData_IncomingCallRequest_Accept {
  return { room: "", peer: "", record: false };
}

export const IncomingCallData_IncomingCallRequest_Accept = {
  encode(message: IncomingCallData_IncomingCallRequest_Accept, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.room !== "") {
      writer.uint32(10).string(message.room);
    }
    if (message.peer !== "") {
      writer.uint32(18).string(message.peer);
    }
    if (message.record !== false) {
      writer.uint32(24).bool(message.record);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): IncomingCallData_IncomingCallRequest_Accept {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIncomingCallData_IncomingCallRequest_Accept();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.room = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.peer = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.record = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IncomingCallData_IncomingCallRequest_Accept {
    return {
      room: isSet(object.room) ? globalThis.String(object.room) : "",
      peer: isSet(object.peer) ? globalThis.String(object.peer) : "",
      record: isSet(object.record) ? globalThis.Boolean(object.record) : false,
    };
  },

  toJSON(message: IncomingCallData_IncomingCallRequest_Accept): unknown {
    const obj: any = {};
    if (message.room !== "") {
      obj.room = message.room;
    }
    if (message.peer !== "") {
      obj.peer = message.peer;
    }
    if (message.record !== false) {
      obj.record = message.record;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IncomingCallData_IncomingCallRequest_Accept>, I>>(
    base?: I,
  ): IncomingCallData_IncomingCallRequest_Accept {
    return IncomingCallData_IncomingCallRequest_Accept.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IncomingCallData_IncomingCallRequest_Accept>, I>>(
    object: I,
  ): IncomingCallData_IncomingCallRequest_Accept {
    const message = createBaseIncomingCallData_IncomingCallRequest_Accept();
    message.room = object.room ?? "";
    message.peer = object.peer ?? "";
    message.record = object.record ?? false;
    return message;
  },
};

function createBaseIncomingCallData_IncomingCallRequest_End(): IncomingCallData_IncomingCallRequest_End {
  return {};
}

export const IncomingCallData_IncomingCallRequest_End = {
  encode(_: IncomingCallData_IncomingCallRequest_End, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): IncomingCallData_IncomingCallRequest_End {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIncomingCallData_IncomingCallRequest_End();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): IncomingCallData_IncomingCallRequest_End {
    return {};
  },

  toJSON(_: IncomingCallData_IncomingCallRequest_End): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<IncomingCallData_IncomingCallRequest_End>, I>>(
    base?: I,
  ): IncomingCallData_IncomingCallRequest_End {
    return IncomingCallData_IncomingCallRequest_End.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IncomingCallData_IncomingCallRequest_End>, I>>(
    _: I,
  ): IncomingCallData_IncomingCallRequest_End {
    const message = createBaseIncomingCallData_IncomingCallRequest_End();
    return message;
  },
};

function createBaseIncomingCallData_IncomingCallResponse(): IncomingCallData_IncomingCallResponse {
  return { reqId: 0, error: undefined, ring: undefined, accept: undefined, end: undefined };
}

export const IncomingCallData_IncomingCallResponse = {
  encode(message: IncomingCallData_IncomingCallResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.reqId !== 0) {
      writer.uint32(8).uint32(message.reqId);
    }
    if (message.error !== undefined) {
      IncomingCallData_IncomingCallResponse_Error.encode(message.error, writer.uint32(82).fork()).ldelim();
    }
    if (message.ring !== undefined) {
      IncomingCallData_IncomingCallResponse_Ring.encode(message.ring, writer.uint32(90).fork()).ldelim();
    }
    if (message.accept !== undefined) {
      IncomingCallData_IncomingCallResponse_Accept.encode(message.accept, writer.uint32(98).fork()).ldelim();
    }
    if (message.end !== undefined) {
      IncomingCallData_IncomingCallResponse_End.encode(message.end, writer.uint32(106).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): IncomingCallData_IncomingCallResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIncomingCallData_IncomingCallResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.reqId = reader.uint32();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.error = IncomingCallData_IncomingCallResponse_Error.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.ring = IncomingCallData_IncomingCallResponse_Ring.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.accept = IncomingCallData_IncomingCallResponse_Accept.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.end = IncomingCallData_IncomingCallResponse_End.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IncomingCallData_IncomingCallResponse {
    return {
      reqId: isSet(object.reqId) ? globalThis.Number(object.reqId) : 0,
      error: isSet(object.error) ? IncomingCallData_IncomingCallResponse_Error.fromJSON(object.error) : undefined,
      ring: isSet(object.ring) ? IncomingCallData_IncomingCallResponse_Ring.fromJSON(object.ring) : undefined,
      accept: isSet(object.accept) ? IncomingCallData_IncomingCallResponse_Accept.fromJSON(object.accept) : undefined,
      end: isSet(object.end) ? IncomingCallData_IncomingCallResponse_End.fromJSON(object.end) : undefined,
    };
  },

  toJSON(message: IncomingCallData_IncomingCallResponse): unknown {
    const obj: any = {};
    if (message.reqId !== 0) {
      obj.reqId = Math.round(message.reqId);
    }
    if (message.error !== undefined) {
      obj.error = IncomingCallData_IncomingCallResponse_Error.toJSON(message.error);
    }
    if (message.ring !== undefined) {
      obj.ring = IncomingCallData_IncomingCallResponse_Ring.toJSON(message.ring);
    }
    if (message.accept !== undefined) {
      obj.accept = IncomingCallData_IncomingCallResponse_Accept.toJSON(message.accept);
    }
    if (message.end !== undefined) {
      obj.end = IncomingCallData_IncomingCallResponse_End.toJSON(message.end);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IncomingCallData_IncomingCallResponse>, I>>(
    base?: I,
  ): IncomingCallData_IncomingCallResponse {
    return IncomingCallData_IncomingCallResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IncomingCallData_IncomingCallResponse>, I>>(
    object: I,
  ): IncomingCallData_IncomingCallResponse {
    const message = createBaseIncomingCallData_IncomingCallResponse();
    message.reqId = object.reqId ?? 0;
    message.error = (object.error !== undefined && object.error !== null)
      ? IncomingCallData_IncomingCallResponse_Error.fromPartial(object.error)
      : undefined;
    message.ring = (object.ring !== undefined && object.ring !== null)
      ? IncomingCallData_IncomingCallResponse_Ring.fromPartial(object.ring)
      : undefined;
    message.accept = (object.accept !== undefined && object.accept !== null)
      ? IncomingCallData_IncomingCallResponse_Accept.fromPartial(object.accept)
      : undefined;
    message.end = (object.end !== undefined && object.end !== null)
      ? IncomingCallData_IncomingCallResponse_End.fromPartial(object.end)
      : undefined;
    return message;
  },
};

function createBaseIncomingCallData_IncomingCallResponse_Ring(): IncomingCallData_IncomingCallResponse_Ring {
  return {};
}

export const IncomingCallData_IncomingCallResponse_Ring = {
  encode(_: IncomingCallData_IncomingCallResponse_Ring, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): IncomingCallData_IncomingCallResponse_Ring {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIncomingCallData_IncomingCallResponse_Ring();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): IncomingCallData_IncomingCallResponse_Ring {
    return {};
  },

  toJSON(_: IncomingCallData_IncomingCallResponse_Ring): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<IncomingCallData_IncomingCallResponse_Ring>, I>>(
    base?: I,
  ): IncomingCallData_IncomingCallResponse_Ring {
    return IncomingCallData_IncomingCallResponse_Ring.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IncomingCallData_IncomingCallResponse_Ring>, I>>(
    _: I,
  ): IncomingCallData_IncomingCallResponse_Ring {
    const message = createBaseIncomingCallData_IncomingCallResponse_Ring();
    return message;
  },
};

function createBaseIncomingCallData_IncomingCallResponse_Accept(): IncomingCallData_IncomingCallResponse_Accept {
  return {};
}

export const IncomingCallData_IncomingCallResponse_Accept = {
  encode(_: IncomingCallData_IncomingCallResponse_Accept, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): IncomingCallData_IncomingCallResponse_Accept {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIncomingCallData_IncomingCallResponse_Accept();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): IncomingCallData_IncomingCallResponse_Accept {
    return {};
  },

  toJSON(_: IncomingCallData_IncomingCallResponse_Accept): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<IncomingCallData_IncomingCallResponse_Accept>, I>>(
    base?: I,
  ): IncomingCallData_IncomingCallResponse_Accept {
    return IncomingCallData_IncomingCallResponse_Accept.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IncomingCallData_IncomingCallResponse_Accept>, I>>(
    _: I,
  ): IncomingCallData_IncomingCallResponse_Accept {
    const message = createBaseIncomingCallData_IncomingCallResponse_Accept();
    return message;
  },
};

function createBaseIncomingCallData_IncomingCallResponse_End(): IncomingCallData_IncomingCallResponse_End {
  return {};
}

export const IncomingCallData_IncomingCallResponse_End = {
  encode(_: IncomingCallData_IncomingCallResponse_End, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): IncomingCallData_IncomingCallResponse_End {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIncomingCallData_IncomingCallResponse_End();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): IncomingCallData_IncomingCallResponse_End {
    return {};
  },

  toJSON(_: IncomingCallData_IncomingCallResponse_End): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<IncomingCallData_IncomingCallResponse_End>, I>>(
    base?: I,
  ): IncomingCallData_IncomingCallResponse_End {
    return IncomingCallData_IncomingCallResponse_End.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IncomingCallData_IncomingCallResponse_End>, I>>(
    _: I,
  ): IncomingCallData_IncomingCallResponse_End {
    const message = createBaseIncomingCallData_IncomingCallResponse_End();
    return message;
  },
};

function createBaseIncomingCallData_IncomingCallResponse_Error(): IncomingCallData_IncomingCallResponse_Error {
  return { message: "" };
}

export const IncomingCallData_IncomingCallResponse_Error = {
  encode(message: IncomingCallData_IncomingCallResponse_Error, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): IncomingCallData_IncomingCallResponse_Error {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIncomingCallData_IncomingCallResponse_Error();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IncomingCallData_IncomingCallResponse_Error {
    return { message: isSet(object.message) ? globalThis.String(object.message) : "" };
  },

  toJSON(message: IncomingCallData_IncomingCallResponse_Error): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IncomingCallData_IncomingCallResponse_Error>, I>>(
    base?: I,
  ): IncomingCallData_IncomingCallResponse_Error {
    return IncomingCallData_IncomingCallResponse_Error.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IncomingCallData_IncomingCallResponse_Error>, I>>(
    object: I,
  ): IncomingCallData_IncomingCallResponse_Error {
    const message = createBaseIncomingCallData_IncomingCallResponse_Error();
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseOutgoingCallData(): OutgoingCallData {
  return { event: undefined, request: undefined, response: undefined };
}

export const OutgoingCallData = {
  encode(message: OutgoingCallData, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.event !== undefined) {
      OutgoingCallData_OutgoingCallEvent.encode(message.event, writer.uint32(10).fork()).ldelim();
    }
    if (message.request !== undefined) {
      OutgoingCallData_OutgoingCallRequest.encode(message.request, writer.uint32(18).fork()).ldelim();
    }
    if (message.response !== undefined) {
      OutgoingCallData_OutgoingCallResponse.encode(message.response, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): OutgoingCallData {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOutgoingCallData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.event = OutgoingCallData_OutgoingCallEvent.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.request = OutgoingCallData_OutgoingCallRequest.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.response = OutgoingCallData_OutgoingCallResponse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OutgoingCallData {
    return {
      event: isSet(object.event) ? OutgoingCallData_OutgoingCallEvent.fromJSON(object.event) : undefined,
      request: isSet(object.request) ? OutgoingCallData_OutgoingCallRequest.fromJSON(object.request) : undefined,
      response: isSet(object.response) ? OutgoingCallData_OutgoingCallResponse.fromJSON(object.response) : undefined,
    };
  },

  toJSON(message: OutgoingCallData): unknown {
    const obj: any = {};
    if (message.event !== undefined) {
      obj.event = OutgoingCallData_OutgoingCallEvent.toJSON(message.event);
    }
    if (message.request !== undefined) {
      obj.request = OutgoingCallData_OutgoingCallRequest.toJSON(message.request);
    }
    if (message.response !== undefined) {
      obj.response = OutgoingCallData_OutgoingCallResponse.toJSON(message.response);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OutgoingCallData>, I>>(base?: I): OutgoingCallData {
    return OutgoingCallData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OutgoingCallData>, I>>(object: I): OutgoingCallData {
    const message = createBaseOutgoingCallData();
    message.event = (object.event !== undefined && object.event !== null)
      ? OutgoingCallData_OutgoingCallEvent.fromPartial(object.event)
      : undefined;
    message.request = (object.request !== undefined && object.request !== null)
      ? OutgoingCallData_OutgoingCallRequest.fromPartial(object.request)
      : undefined;
    message.response = (object.response !== undefined && object.response !== null)
      ? OutgoingCallData_OutgoingCallResponse.fromPartial(object.response)
      : undefined;
    return message;
  },
};

function createBaseOutgoingCallData_OutgoingCallEvent(): OutgoingCallData_OutgoingCallEvent {
  return { err: undefined, sip: undefined, ended: undefined };
}

export const OutgoingCallData_OutgoingCallEvent = {
  encode(message: OutgoingCallData_OutgoingCallEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.err !== undefined) {
      OutgoingCallData_OutgoingCallEvent_Error.encode(message.err, writer.uint32(10).fork()).ldelim();
    }
    if (message.sip !== undefined) {
      OutgoingCallData_OutgoingCallEvent_SipEvent.encode(message.sip, writer.uint32(18).fork()).ldelim();
    }
    if (message.ended !== undefined) {
      OutgoingCallData_OutgoingCallEvent_Ended.encode(message.ended, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): OutgoingCallData_OutgoingCallEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOutgoingCallData_OutgoingCallEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.err = OutgoingCallData_OutgoingCallEvent_Error.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.sip = OutgoingCallData_OutgoingCallEvent_SipEvent.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.ended = OutgoingCallData_OutgoingCallEvent_Ended.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OutgoingCallData_OutgoingCallEvent {
    return {
      err: isSet(object.err) ? OutgoingCallData_OutgoingCallEvent_Error.fromJSON(object.err) : undefined,
      sip: isSet(object.sip) ? OutgoingCallData_OutgoingCallEvent_SipEvent.fromJSON(object.sip) : undefined,
      ended: isSet(object.ended) ? OutgoingCallData_OutgoingCallEvent_Ended.fromJSON(object.ended) : undefined,
    };
  },

  toJSON(message: OutgoingCallData_OutgoingCallEvent): unknown {
    const obj: any = {};
    if (message.err !== undefined) {
      obj.err = OutgoingCallData_OutgoingCallEvent_Error.toJSON(message.err);
    }
    if (message.sip !== undefined) {
      obj.sip = OutgoingCallData_OutgoingCallEvent_SipEvent.toJSON(message.sip);
    }
    if (message.ended !== undefined) {
      obj.ended = OutgoingCallData_OutgoingCallEvent_Ended.toJSON(message.ended);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OutgoingCallData_OutgoingCallEvent>, I>>(
    base?: I,
  ): OutgoingCallData_OutgoingCallEvent {
    return OutgoingCallData_OutgoingCallEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OutgoingCallData_OutgoingCallEvent>, I>>(
    object: I,
  ): OutgoingCallData_OutgoingCallEvent {
    const message = createBaseOutgoingCallData_OutgoingCallEvent();
    message.err = (object.err !== undefined && object.err !== null)
      ? OutgoingCallData_OutgoingCallEvent_Error.fromPartial(object.err)
      : undefined;
    message.sip = (object.sip !== undefined && object.sip !== null)
      ? OutgoingCallData_OutgoingCallEvent_SipEvent.fromPartial(object.sip)
      : undefined;
    message.ended = (object.ended !== undefined && object.ended !== null)
      ? OutgoingCallData_OutgoingCallEvent_Ended.fromPartial(object.ended)
      : undefined;
    return message;
  },
};

function createBaseOutgoingCallData_OutgoingCallEvent_SipEvent(): OutgoingCallData_OutgoingCallEvent_SipEvent {
  return { provisional: undefined, early: undefined, accepted: undefined, failure: undefined, bye: undefined };
}

export const OutgoingCallData_OutgoingCallEvent_SipEvent = {
  encode(message: OutgoingCallData_OutgoingCallEvent_SipEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.provisional !== undefined) {
      OutgoingCallData_OutgoingCallEvent_SipEvent_Provisional.encode(message.provisional, writer.uint32(10).fork())
        .ldelim();
    }
    if (message.early !== undefined) {
      OutgoingCallData_OutgoingCallEvent_SipEvent_Early.encode(message.early, writer.uint32(18).fork()).ldelim();
    }
    if (message.accepted !== undefined) {
      OutgoingCallData_OutgoingCallEvent_SipEvent_Accepted.encode(message.accepted, writer.uint32(26).fork()).ldelim();
    }
    if (message.failure !== undefined) {
      OutgoingCallData_OutgoingCallEvent_SipEvent_Failure.encode(message.failure, writer.uint32(34).fork()).ldelim();
    }
    if (message.bye !== undefined) {
      OutgoingCallData_OutgoingCallEvent_SipEvent_Bye.encode(message.bye, writer.uint32(42).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): OutgoingCallData_OutgoingCallEvent_SipEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOutgoingCallData_OutgoingCallEvent_SipEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.provisional = OutgoingCallData_OutgoingCallEvent_SipEvent_Provisional.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.early = OutgoingCallData_OutgoingCallEvent_SipEvent_Early.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.accepted = OutgoingCallData_OutgoingCallEvent_SipEvent_Accepted.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.failure = OutgoingCallData_OutgoingCallEvent_SipEvent_Failure.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.bye = OutgoingCallData_OutgoingCallEvent_SipEvent_Bye.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OutgoingCallData_OutgoingCallEvent_SipEvent {
    return {
      provisional: isSet(object.provisional)
        ? OutgoingCallData_OutgoingCallEvent_SipEvent_Provisional.fromJSON(object.provisional)
        : undefined,
      early: isSet(object.early) ? OutgoingCallData_OutgoingCallEvent_SipEvent_Early.fromJSON(object.early) : undefined,
      accepted: isSet(object.accepted)
        ? OutgoingCallData_OutgoingCallEvent_SipEvent_Accepted.fromJSON(object.accepted)
        : undefined,
      failure: isSet(object.failure)
        ? OutgoingCallData_OutgoingCallEvent_SipEvent_Failure.fromJSON(object.failure)
        : undefined,
      bye: isSet(object.bye) ? OutgoingCallData_OutgoingCallEvent_SipEvent_Bye.fromJSON(object.bye) : undefined,
    };
  },

  toJSON(message: OutgoingCallData_OutgoingCallEvent_SipEvent): unknown {
    const obj: any = {};
    if (message.provisional !== undefined) {
      obj.provisional = OutgoingCallData_OutgoingCallEvent_SipEvent_Provisional.toJSON(message.provisional);
    }
    if (message.early !== undefined) {
      obj.early = OutgoingCallData_OutgoingCallEvent_SipEvent_Early.toJSON(message.early);
    }
    if (message.accepted !== undefined) {
      obj.accepted = OutgoingCallData_OutgoingCallEvent_SipEvent_Accepted.toJSON(message.accepted);
    }
    if (message.failure !== undefined) {
      obj.failure = OutgoingCallData_OutgoingCallEvent_SipEvent_Failure.toJSON(message.failure);
    }
    if (message.bye !== undefined) {
      obj.bye = OutgoingCallData_OutgoingCallEvent_SipEvent_Bye.toJSON(message.bye);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OutgoingCallData_OutgoingCallEvent_SipEvent>, I>>(
    base?: I,
  ): OutgoingCallData_OutgoingCallEvent_SipEvent {
    return OutgoingCallData_OutgoingCallEvent_SipEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OutgoingCallData_OutgoingCallEvent_SipEvent>, I>>(
    object: I,
  ): OutgoingCallData_OutgoingCallEvent_SipEvent {
    const message = createBaseOutgoingCallData_OutgoingCallEvent_SipEvent();
    message.provisional = (object.provisional !== undefined && object.provisional !== null)
      ? OutgoingCallData_OutgoingCallEvent_SipEvent_Provisional.fromPartial(object.provisional)
      : undefined;
    message.early = (object.early !== undefined && object.early !== null)
      ? OutgoingCallData_OutgoingCallEvent_SipEvent_Early.fromPartial(object.early)
      : undefined;
    message.accepted = (object.accepted !== undefined && object.accepted !== null)
      ? OutgoingCallData_OutgoingCallEvent_SipEvent_Accepted.fromPartial(object.accepted)
      : undefined;
    message.failure = (object.failure !== undefined && object.failure !== null)
      ? OutgoingCallData_OutgoingCallEvent_SipEvent_Failure.fromPartial(object.failure)
      : undefined;
    message.bye = (object.bye !== undefined && object.bye !== null)
      ? OutgoingCallData_OutgoingCallEvent_SipEvent_Bye.fromPartial(object.bye)
      : undefined;
    return message;
  },
};

function createBaseOutgoingCallData_OutgoingCallEvent_SipEvent_Provisional(): OutgoingCallData_OutgoingCallEvent_SipEvent_Provisional {
  return { code: 0 };
}

export const OutgoingCallData_OutgoingCallEvent_SipEvent_Provisional = {
  encode(
    message: OutgoingCallData_OutgoingCallEvent_SipEvent_Provisional,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.code !== 0) {
      writer.uint32(8).uint32(message.code);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): OutgoingCallData_OutgoingCallEvent_SipEvent_Provisional {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOutgoingCallData_OutgoingCallEvent_SipEvent_Provisional();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.code = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OutgoingCallData_OutgoingCallEvent_SipEvent_Provisional {
    return { code: isSet(object.code) ? globalThis.Number(object.code) : 0 };
  },

  toJSON(message: OutgoingCallData_OutgoingCallEvent_SipEvent_Provisional): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = Math.round(message.code);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OutgoingCallData_OutgoingCallEvent_SipEvent_Provisional>, I>>(
    base?: I,
  ): OutgoingCallData_OutgoingCallEvent_SipEvent_Provisional {
    return OutgoingCallData_OutgoingCallEvent_SipEvent_Provisional.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OutgoingCallData_OutgoingCallEvent_SipEvent_Provisional>, I>>(
    object: I,
  ): OutgoingCallData_OutgoingCallEvent_SipEvent_Provisional {
    const message = createBaseOutgoingCallData_OutgoingCallEvent_SipEvent_Provisional();
    message.code = object.code ?? 0;
    return message;
  },
};

function createBaseOutgoingCallData_OutgoingCallEvent_SipEvent_Early(): OutgoingCallData_OutgoingCallEvent_SipEvent_Early {
  return { code: 0 };
}

export const OutgoingCallData_OutgoingCallEvent_SipEvent_Early = {
  encode(
    message: OutgoingCallData_OutgoingCallEvent_SipEvent_Early,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.code !== 0) {
      writer.uint32(8).uint32(message.code);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): OutgoingCallData_OutgoingCallEvent_SipEvent_Early {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOutgoingCallData_OutgoingCallEvent_SipEvent_Early();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.code = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OutgoingCallData_OutgoingCallEvent_SipEvent_Early {
    return { code: isSet(object.code) ? globalThis.Number(object.code) : 0 };
  },

  toJSON(message: OutgoingCallData_OutgoingCallEvent_SipEvent_Early): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = Math.round(message.code);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OutgoingCallData_OutgoingCallEvent_SipEvent_Early>, I>>(
    base?: I,
  ): OutgoingCallData_OutgoingCallEvent_SipEvent_Early {
    return OutgoingCallData_OutgoingCallEvent_SipEvent_Early.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OutgoingCallData_OutgoingCallEvent_SipEvent_Early>, I>>(
    object: I,
  ): OutgoingCallData_OutgoingCallEvent_SipEvent_Early {
    const message = createBaseOutgoingCallData_OutgoingCallEvent_SipEvent_Early();
    message.code = object.code ?? 0;
    return message;
  },
};

function createBaseOutgoingCallData_OutgoingCallEvent_SipEvent_Accepted(): OutgoingCallData_OutgoingCallEvent_SipEvent_Accepted {
  return { code: 0 };
}

export const OutgoingCallData_OutgoingCallEvent_SipEvent_Accepted = {
  encode(
    message: OutgoingCallData_OutgoingCallEvent_SipEvent_Accepted,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.code !== 0) {
      writer.uint32(8).uint32(message.code);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): OutgoingCallData_OutgoingCallEvent_SipEvent_Accepted {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOutgoingCallData_OutgoingCallEvent_SipEvent_Accepted();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.code = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OutgoingCallData_OutgoingCallEvent_SipEvent_Accepted {
    return { code: isSet(object.code) ? globalThis.Number(object.code) : 0 };
  },

  toJSON(message: OutgoingCallData_OutgoingCallEvent_SipEvent_Accepted): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = Math.round(message.code);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OutgoingCallData_OutgoingCallEvent_SipEvent_Accepted>, I>>(
    base?: I,
  ): OutgoingCallData_OutgoingCallEvent_SipEvent_Accepted {
    return OutgoingCallData_OutgoingCallEvent_SipEvent_Accepted.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OutgoingCallData_OutgoingCallEvent_SipEvent_Accepted>, I>>(
    object: I,
  ): OutgoingCallData_OutgoingCallEvent_SipEvent_Accepted {
    const message = createBaseOutgoingCallData_OutgoingCallEvent_SipEvent_Accepted();
    message.code = object.code ?? 0;
    return message;
  },
};

function createBaseOutgoingCallData_OutgoingCallEvent_SipEvent_Failure(): OutgoingCallData_OutgoingCallEvent_SipEvent_Failure {
  return { code: 0 };
}

export const OutgoingCallData_OutgoingCallEvent_SipEvent_Failure = {
  encode(
    message: OutgoingCallData_OutgoingCallEvent_SipEvent_Failure,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.code !== 0) {
      writer.uint32(8).uint32(message.code);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): OutgoingCallData_OutgoingCallEvent_SipEvent_Failure {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOutgoingCallData_OutgoingCallEvent_SipEvent_Failure();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.code = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OutgoingCallData_OutgoingCallEvent_SipEvent_Failure {
    return { code: isSet(object.code) ? globalThis.Number(object.code) : 0 };
  },

  toJSON(message: OutgoingCallData_OutgoingCallEvent_SipEvent_Failure): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = Math.round(message.code);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OutgoingCallData_OutgoingCallEvent_SipEvent_Failure>, I>>(
    base?: I,
  ): OutgoingCallData_OutgoingCallEvent_SipEvent_Failure {
    return OutgoingCallData_OutgoingCallEvent_SipEvent_Failure.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OutgoingCallData_OutgoingCallEvent_SipEvent_Failure>, I>>(
    object: I,
  ): OutgoingCallData_OutgoingCallEvent_SipEvent_Failure {
    const message = createBaseOutgoingCallData_OutgoingCallEvent_SipEvent_Failure();
    message.code = object.code ?? 0;
    return message;
  },
};

function createBaseOutgoingCallData_OutgoingCallEvent_SipEvent_Bye(): OutgoingCallData_OutgoingCallEvent_SipEvent_Bye {
  return {};
}

export const OutgoingCallData_OutgoingCallEvent_SipEvent_Bye = {
  encode(_: OutgoingCallData_OutgoingCallEvent_SipEvent_Bye, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): OutgoingCallData_OutgoingCallEvent_SipEvent_Bye {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOutgoingCallData_OutgoingCallEvent_SipEvent_Bye();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): OutgoingCallData_OutgoingCallEvent_SipEvent_Bye {
    return {};
  },

  toJSON(_: OutgoingCallData_OutgoingCallEvent_SipEvent_Bye): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<OutgoingCallData_OutgoingCallEvent_SipEvent_Bye>, I>>(
    base?: I,
  ): OutgoingCallData_OutgoingCallEvent_SipEvent_Bye {
    return OutgoingCallData_OutgoingCallEvent_SipEvent_Bye.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OutgoingCallData_OutgoingCallEvent_SipEvent_Bye>, I>>(
    _: I,
  ): OutgoingCallData_OutgoingCallEvent_SipEvent_Bye {
    const message = createBaseOutgoingCallData_OutgoingCallEvent_SipEvent_Bye();
    return message;
  },
};

function createBaseOutgoingCallData_OutgoingCallEvent_Ended(): OutgoingCallData_OutgoingCallEvent_Ended {
  return {};
}

export const OutgoingCallData_OutgoingCallEvent_Ended = {
  encode(_: OutgoingCallData_OutgoingCallEvent_Ended, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): OutgoingCallData_OutgoingCallEvent_Ended {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOutgoingCallData_OutgoingCallEvent_Ended();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): OutgoingCallData_OutgoingCallEvent_Ended {
    return {};
  },

  toJSON(_: OutgoingCallData_OutgoingCallEvent_Ended): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<OutgoingCallData_OutgoingCallEvent_Ended>, I>>(
    base?: I,
  ): OutgoingCallData_OutgoingCallEvent_Ended {
    return OutgoingCallData_OutgoingCallEvent_Ended.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OutgoingCallData_OutgoingCallEvent_Ended>, I>>(
    _: I,
  ): OutgoingCallData_OutgoingCallEvent_Ended {
    const message = createBaseOutgoingCallData_OutgoingCallEvent_Ended();
    return message;
  },
};

function createBaseOutgoingCallData_OutgoingCallEvent_Error(): OutgoingCallData_OutgoingCallEvent_Error {
  return { message: "" };
}

export const OutgoingCallData_OutgoingCallEvent_Error = {
  encode(message: OutgoingCallData_OutgoingCallEvent_Error, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): OutgoingCallData_OutgoingCallEvent_Error {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOutgoingCallData_OutgoingCallEvent_Error();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OutgoingCallData_OutgoingCallEvent_Error {
    return { message: isSet(object.message) ? globalThis.String(object.message) : "" };
  },

  toJSON(message: OutgoingCallData_OutgoingCallEvent_Error): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OutgoingCallData_OutgoingCallEvent_Error>, I>>(
    base?: I,
  ): OutgoingCallData_OutgoingCallEvent_Error {
    return OutgoingCallData_OutgoingCallEvent_Error.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OutgoingCallData_OutgoingCallEvent_Error>, I>>(
    object: I,
  ): OutgoingCallData_OutgoingCallEvent_Error {
    const message = createBaseOutgoingCallData_OutgoingCallEvent_Error();
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseOutgoingCallData_OutgoingCallRequest(): OutgoingCallData_OutgoingCallRequest {
  return { reqId: 0, end: undefined };
}

export const OutgoingCallData_OutgoingCallRequest = {
  encode(message: OutgoingCallData_OutgoingCallRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.reqId !== 0) {
      writer.uint32(8).uint32(message.reqId);
    }
    if (message.end !== undefined) {
      OutgoingCallData_OutgoingCallRequest_End.encode(message.end, writer.uint32(82).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): OutgoingCallData_OutgoingCallRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOutgoingCallData_OutgoingCallRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.reqId = reader.uint32();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.end = OutgoingCallData_OutgoingCallRequest_End.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OutgoingCallData_OutgoingCallRequest {
    return {
      reqId: isSet(object.reqId) ? globalThis.Number(object.reqId) : 0,
      end: isSet(object.end) ? OutgoingCallData_OutgoingCallRequest_End.fromJSON(object.end) : undefined,
    };
  },

  toJSON(message: OutgoingCallData_OutgoingCallRequest): unknown {
    const obj: any = {};
    if (message.reqId !== 0) {
      obj.reqId = Math.round(message.reqId);
    }
    if (message.end !== undefined) {
      obj.end = OutgoingCallData_OutgoingCallRequest_End.toJSON(message.end);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OutgoingCallData_OutgoingCallRequest>, I>>(
    base?: I,
  ): OutgoingCallData_OutgoingCallRequest {
    return OutgoingCallData_OutgoingCallRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OutgoingCallData_OutgoingCallRequest>, I>>(
    object: I,
  ): OutgoingCallData_OutgoingCallRequest {
    const message = createBaseOutgoingCallData_OutgoingCallRequest();
    message.reqId = object.reqId ?? 0;
    message.end = (object.end !== undefined && object.end !== null)
      ? OutgoingCallData_OutgoingCallRequest_End.fromPartial(object.end)
      : undefined;
    return message;
  },
};

function createBaseOutgoingCallData_OutgoingCallRequest_End(): OutgoingCallData_OutgoingCallRequest_End {
  return {};
}

export const OutgoingCallData_OutgoingCallRequest_End = {
  encode(_: OutgoingCallData_OutgoingCallRequest_End, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): OutgoingCallData_OutgoingCallRequest_End {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOutgoingCallData_OutgoingCallRequest_End();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): OutgoingCallData_OutgoingCallRequest_End {
    return {};
  },

  toJSON(_: OutgoingCallData_OutgoingCallRequest_End): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<OutgoingCallData_OutgoingCallRequest_End>, I>>(
    base?: I,
  ): OutgoingCallData_OutgoingCallRequest_End {
    return OutgoingCallData_OutgoingCallRequest_End.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OutgoingCallData_OutgoingCallRequest_End>, I>>(
    _: I,
  ): OutgoingCallData_OutgoingCallRequest_End {
    const message = createBaseOutgoingCallData_OutgoingCallRequest_End();
    return message;
  },
};

function createBaseOutgoingCallData_OutgoingCallResponse(): OutgoingCallData_OutgoingCallResponse {
  return { reqId: 0, error: undefined, end: undefined };
}

export const OutgoingCallData_OutgoingCallResponse = {
  encode(message: OutgoingCallData_OutgoingCallResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.reqId !== 0) {
      writer.uint32(8).uint32(message.reqId);
    }
    if (message.error !== undefined) {
      OutgoingCallData_OutgoingCallResponse_Error.encode(message.error, writer.uint32(82).fork()).ldelim();
    }
    if (message.end !== undefined) {
      OutgoingCallData_OutgoingCallResponse_End.encode(message.end, writer.uint32(90).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): OutgoingCallData_OutgoingCallResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOutgoingCallData_OutgoingCallResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.reqId = reader.uint32();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.error = OutgoingCallData_OutgoingCallResponse_Error.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.end = OutgoingCallData_OutgoingCallResponse_End.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OutgoingCallData_OutgoingCallResponse {
    return {
      reqId: isSet(object.reqId) ? globalThis.Number(object.reqId) : 0,
      error: isSet(object.error) ? OutgoingCallData_OutgoingCallResponse_Error.fromJSON(object.error) : undefined,
      end: isSet(object.end) ? OutgoingCallData_OutgoingCallResponse_End.fromJSON(object.end) : undefined,
    };
  },

  toJSON(message: OutgoingCallData_OutgoingCallResponse): unknown {
    const obj: any = {};
    if (message.reqId !== 0) {
      obj.reqId = Math.round(message.reqId);
    }
    if (message.error !== undefined) {
      obj.error = OutgoingCallData_OutgoingCallResponse_Error.toJSON(message.error);
    }
    if (message.end !== undefined) {
      obj.end = OutgoingCallData_OutgoingCallResponse_End.toJSON(message.end);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OutgoingCallData_OutgoingCallResponse>, I>>(
    base?: I,
  ): OutgoingCallData_OutgoingCallResponse {
    return OutgoingCallData_OutgoingCallResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OutgoingCallData_OutgoingCallResponse>, I>>(
    object: I,
  ): OutgoingCallData_OutgoingCallResponse {
    const message = createBaseOutgoingCallData_OutgoingCallResponse();
    message.reqId = object.reqId ?? 0;
    message.error = (object.error !== undefined && object.error !== null)
      ? OutgoingCallData_OutgoingCallResponse_Error.fromPartial(object.error)
      : undefined;
    message.end = (object.end !== undefined && object.end !== null)
      ? OutgoingCallData_OutgoingCallResponse_End.fromPartial(object.end)
      : undefined;
    return message;
  },
};

function createBaseOutgoingCallData_OutgoingCallResponse_End(): OutgoingCallData_OutgoingCallResponse_End {
  return {};
}

export const OutgoingCallData_OutgoingCallResponse_End = {
  encode(_: OutgoingCallData_OutgoingCallResponse_End, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): OutgoingCallData_OutgoingCallResponse_End {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOutgoingCallData_OutgoingCallResponse_End();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): OutgoingCallData_OutgoingCallResponse_End {
    return {};
  },

  toJSON(_: OutgoingCallData_OutgoingCallResponse_End): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<OutgoingCallData_OutgoingCallResponse_End>, I>>(
    base?: I,
  ): OutgoingCallData_OutgoingCallResponse_End {
    return OutgoingCallData_OutgoingCallResponse_End.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OutgoingCallData_OutgoingCallResponse_End>, I>>(
    _: I,
  ): OutgoingCallData_OutgoingCallResponse_End {
    const message = createBaseOutgoingCallData_OutgoingCallResponse_End();
    return message;
  },
};

function createBaseOutgoingCallData_OutgoingCallResponse_Error(): OutgoingCallData_OutgoingCallResponse_Error {
  return { message: "" };
}

export const OutgoingCallData_OutgoingCallResponse_Error = {
  encode(message: OutgoingCallData_OutgoingCallResponse_Error, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): OutgoingCallData_OutgoingCallResponse_Error {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOutgoingCallData_OutgoingCallResponse_Error();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OutgoingCallData_OutgoingCallResponse_Error {
    return { message: isSet(object.message) ? globalThis.String(object.message) : "" };
  },

  toJSON(message: OutgoingCallData_OutgoingCallResponse_Error): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OutgoingCallData_OutgoingCallResponse_Error>, I>>(
    base?: I,
  ): OutgoingCallData_OutgoingCallResponse_Error {
    return OutgoingCallData_OutgoingCallResponse_Error.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OutgoingCallData_OutgoingCallResponse_Error>, I>>(
    object: I,
  ): OutgoingCallData_OutgoingCallResponse_Error {
    const message = createBaseOutgoingCallData_OutgoingCallResponse_Error();
    message.message = object.message ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
