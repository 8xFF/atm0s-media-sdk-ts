// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.174.0
//   protoc               v4.25.1
// source: session.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";
import { Config, Request as Request1, Response as Response2, ServerEvent as ServerEvent3 } from "./features";
import {
  Error,
  Kind,
  kindFromJSON,
  kindToJSON,
  Receiver_Config,
  Receiver_Source,
  Receiver_Status,
  receiver_StatusFromJSON,
  receiver_StatusToJSON,
  RoomInfoPublish,
  RoomInfoSubscribe,
  Sender_Config,
  Sender_Source,
  Sender_Status,
  sender_StatusFromJSON,
  sender_StatusToJSON,
  Tracks,
} from "./shared";

export const protobufPackage = "session";

export interface RoomJoin {
  room: string;
  peer: string;
  publish: RoomInfoPublish | undefined;
  subscribe: RoomInfoSubscribe | undefined;
  features: Config | undefined;
  metadata?: string | undefined;
}

export interface Request {
  reqId: number;
  session?: Request_Session | undefined;
  room?: Request_Rooom | undefined;
  sender?: Request_Sender | undefined;
  receiver?: Request_Receiver | undefined;
  features?: Request1 | undefined;
}

export interface Request_Session {
  join?: Request_Session_Join | undefined;
  leave?: Request_Session_Leave | undefined;
  sdp?: Request_Session_UpdateSdp | undefined;
  disconnect?: Request_Session_Disconnect | undefined;
}

export interface Request_Session_Join {
  info: RoomJoin | undefined;
  token: string;
}

export interface Request_Session_Leave {
}

export interface Request_Session_UpdateSdp {
  tracks: Tracks | undefined;
  sdp: string;
}

export interface Request_Session_Disconnect {
}

export interface Request_Rooom {
  subscribe?: Request_Rooom_SubscribePeer | undefined;
  unsubscribe?: Request_Rooom_UnsubscribePeer | undefined;
}

export interface Request_Rooom_SubscribePeer {
  peer: string;
}

export interface Request_Rooom_UnsubscribePeer {
  peer: string;
}

export interface Request_Sender {
  name: string;
  attach?: Request_Sender_Attach | undefined;
  detach?: Request_Sender_Detach | undefined;
  config?: Sender_Config | undefined;
}

export interface Request_Sender_Attach {
  source: Sender_Source | undefined;
  config: Sender_Config | undefined;
}

export interface Request_Sender_Detach {
}

export interface Request_Receiver {
  name: string;
  attach?: Request_Receiver_Attach | undefined;
  detach?: Request_Receiver_Detach | undefined;
  config?: Receiver_Config | undefined;
}

export interface Request_Receiver_Attach {
  source: Receiver_Source | undefined;
  config: Receiver_Config | undefined;
}

export interface Request_Receiver_Detach {
}

export interface Response {
  reqId: number;
  error?: Error | undefined;
  session?: Response_Session | undefined;
  room?: Response_Room | undefined;
  sender?: Response_Sender | undefined;
  receiver?: Response_Receiver | undefined;
  features?: Response2 | undefined;
}

export interface Response_Session {
  join?: Response_Session_Join | undefined;
  leave?: Response_Session_Leave | undefined;
  sdp?: Response_Session_UpdateSdp | undefined;
  disconnect?: Response_Session_Disconnect | undefined;
}

export interface Response_Session_Join {
}

export interface Response_Session_Leave {
}

export interface Response_Session_UpdateSdp {
  sdp: string;
}

export interface Response_Session_Disconnect {
}

export interface Response_Room {
  subscribe?: Response_Room_SubscribePeer | undefined;
  unsubscribe?: Response_Room_UnsubscribePeer | undefined;
}

export interface Response_Room_SubscribePeer {
}

export interface Response_Room_UnsubscribePeer {
}

export interface Response_Sender {
  attach?: Response_Sender_Attach | undefined;
  detach?: Response_Sender_Detach | undefined;
  config?: Response_Sender_Config | undefined;
}

export interface Response_Sender_Attach {
}

export interface Response_Sender_Detach {
}

export interface Response_Sender_Config {
}

export interface Response_Receiver {
  attach?: Response_Receiver_Attach | undefined;
  detach?: Response_Receiver_Detach | undefined;
  config?: Response_Receiver_Config | undefined;
}

export interface Response_Receiver_Attach {
}

export interface Response_Receiver_Detach {
}

export interface Response_Receiver_Config {
}

export interface ServerEvent {
  seq: number;
  session?: ServerEvent_Session | undefined;
  room?: ServerEvent_Room | undefined;
  sender?: ServerEvent_Sender | undefined;
  receiver?: ServerEvent_Receiver | undefined;
  response?: Response | undefined;
  features?: ServerEvent3 | undefined;
}

export interface ServerEvent_Session {
  connected?: ServerEvent_Session_Connected | undefined;
  joined?: ServerEvent_Session_JoinedRoom | undefined;
  leaved?: ServerEvent_Session_LeavedRoom | undefined;
  disconnected?: ServerEvent_Session_Disconnected | undefined;
  goway?: ServerEvent_Session_GoAway | undefined;
}

export interface ServerEvent_Session_Connected {
}

export interface ServerEvent_Session_JoinedRoom {
  room: string;
  peer: string;
}

export interface ServerEvent_Session_LeavedRoom {
  room: string;
  peer: string;
}

export interface ServerEvent_Session_Disconnected {
  reason: string;
}

export interface ServerEvent_Session_GoAway {
  reason: string;
  remainSeconds: number;
}

export interface ServerEvent_Room {
  peerJoined?: ServerEvent_Room_PeerJoined | undefined;
  peerUpdated?: ServerEvent_Room_PeerUpdated | undefined;
  peerLeaved?: ServerEvent_Room_PeerLeaved | undefined;
  trackStarted?: ServerEvent_Room_TrackStarted | undefined;
  trackUpdated?: ServerEvent_Room_TrackUpdated | undefined;
  trackStopped?: ServerEvent_Room_TrackStopped | undefined;
}

export interface ServerEvent_Room_PeerJoined {
  peer: string;
  metadata?: string | undefined;
  extraData?: string | undefined;
}

export interface ServerEvent_Room_PeerUpdated {
  peer: string;
  metadata?: string | undefined;
}

export interface ServerEvent_Room_PeerLeaved {
  peer: string;
}

export interface ServerEvent_Room_TrackStarted {
  peer: string;
  track: string;
  kind: Kind;
  metadata?: string | undefined;
}

export interface ServerEvent_Room_TrackUpdated {
  peer: string;
  track: string;
  kind: Kind;
  metadata?: string | undefined;
}

export interface ServerEvent_Room_TrackStopped {
  peer: string;
  track: string;
  kind: Kind;
}

export interface ServerEvent_Sender {
  name: string;
  state?: ServerEvent_Sender_State | undefined;
}

export interface ServerEvent_Sender_State {
  status: Sender_Status;
}

export interface ServerEvent_Receiver {
  name: string;
  state?: ServerEvent_Receiver_State | undefined;
  stats?: ServerEvent_Receiver_Stats | undefined;
  voiceActivity?: ServerEvent_Receiver_VoiceActivity | undefined;
}

export interface ServerEvent_Receiver_State {
  status: Receiver_Status;
}

export interface ServerEvent_Receiver_Stats {
  source?: ServerEvent_Receiver_Stats_Source | undefined;
  transmit?: ServerEvent_Receiver_Stats_Transmit | undefined;
}

export interface ServerEvent_Receiver_Stats_Source {
  bitrateKbps: number;
  rtt: number;
  lost: number;
  jitter: number;
}

export interface ServerEvent_Receiver_Stats_Transmit {
  spatial: number;
  temporal: number;
  bitrateKbps: number;
}

export interface ServerEvent_Receiver_VoiceActivity {
  audioLevel: number;
}

export interface ClientEvent {
  seq: number;
  request?: Request | undefined;
}

function createBaseRoomJoin(): RoomJoin {
  return { room: "", peer: "", publish: undefined, subscribe: undefined, features: undefined, metadata: undefined };
}

export const RoomJoin = {
  encode(message: RoomJoin, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.room !== "") {
      writer.uint32(10).string(message.room);
    }
    if (message.peer !== "") {
      writer.uint32(18).string(message.peer);
    }
    if (message.publish !== undefined) {
      RoomInfoPublish.encode(message.publish, writer.uint32(26).fork()).ldelim();
    }
    if (message.subscribe !== undefined) {
      RoomInfoSubscribe.encode(message.subscribe, writer.uint32(34).fork()).ldelim();
    }
    if (message.features !== undefined) {
      Config.encode(message.features, writer.uint32(42).fork()).ldelim();
    }
    if (message.metadata !== undefined) {
      writer.uint32(50).string(message.metadata);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RoomJoin {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRoomJoin();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.room = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.peer = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.publish = RoomInfoPublish.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.subscribe = RoomInfoSubscribe.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.features = Config.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.metadata = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RoomJoin {
    return {
      room: isSet(object.room) ? globalThis.String(object.room) : "",
      peer: isSet(object.peer) ? globalThis.String(object.peer) : "",
      publish: isSet(object.publish) ? RoomInfoPublish.fromJSON(object.publish) : undefined,
      subscribe: isSet(object.subscribe) ? RoomInfoSubscribe.fromJSON(object.subscribe) : undefined,
      features: isSet(object.features) ? Config.fromJSON(object.features) : undefined,
      metadata: isSet(object.metadata) ? globalThis.String(object.metadata) : undefined,
    };
  },

  toJSON(message: RoomJoin): unknown {
    const obj: any = {};
    if (message.room !== "") {
      obj.room = message.room;
    }
    if (message.peer !== "") {
      obj.peer = message.peer;
    }
    if (message.publish !== undefined) {
      obj.publish = RoomInfoPublish.toJSON(message.publish);
    }
    if (message.subscribe !== undefined) {
      obj.subscribe = RoomInfoSubscribe.toJSON(message.subscribe);
    }
    if (message.features !== undefined) {
      obj.features = Config.toJSON(message.features);
    }
    if (message.metadata !== undefined) {
      obj.metadata = message.metadata;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RoomJoin>, I>>(base?: I): RoomJoin {
    return RoomJoin.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RoomJoin>, I>>(object: I): RoomJoin {
    const message = createBaseRoomJoin();
    message.room = object.room ?? "";
    message.peer = object.peer ?? "";
    message.publish = (object.publish !== undefined && object.publish !== null)
      ? RoomInfoPublish.fromPartial(object.publish)
      : undefined;
    message.subscribe = (object.subscribe !== undefined && object.subscribe !== null)
      ? RoomInfoSubscribe.fromPartial(object.subscribe)
      : undefined;
    message.features = (object.features !== undefined && object.features !== null)
      ? Config.fromPartial(object.features)
      : undefined;
    message.metadata = object.metadata ?? undefined;
    return message;
  },
};

function createBaseRequest(): Request {
  return { reqId: 0, session: undefined, room: undefined, sender: undefined, receiver: undefined, features: undefined };
}

export const Request = {
  encode(message: Request, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.reqId !== 0) {
      writer.uint32(8).uint32(message.reqId);
    }
    if (message.session !== undefined) {
      Request_Session.encode(message.session, writer.uint32(18).fork()).ldelim();
    }
    if (message.room !== undefined) {
      Request_Rooom.encode(message.room, writer.uint32(26).fork()).ldelim();
    }
    if (message.sender !== undefined) {
      Request_Sender.encode(message.sender, writer.uint32(34).fork()).ldelim();
    }
    if (message.receiver !== undefined) {
      Request_Receiver.encode(message.receiver, writer.uint32(42).fork()).ldelim();
    }
    if (message.features !== undefined) {
      Request1.encode(message.features, writer.uint32(50).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Request {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.reqId = reader.uint32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.session = Request_Session.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.room = Request_Rooom.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.sender = Request_Sender.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.receiver = Request_Receiver.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.features = Request1.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Request {
    return {
      reqId: isSet(object.reqId) ? globalThis.Number(object.reqId) : 0,
      session: isSet(object.session) ? Request_Session.fromJSON(object.session) : undefined,
      room: isSet(object.room) ? Request_Rooom.fromJSON(object.room) : undefined,
      sender: isSet(object.sender) ? Request_Sender.fromJSON(object.sender) : undefined,
      receiver: isSet(object.receiver) ? Request_Receiver.fromJSON(object.receiver) : undefined,
      features: isSet(object.features) ? Request1.fromJSON(object.features) : undefined,
    };
  },

  toJSON(message: Request): unknown {
    const obj: any = {};
    if (message.reqId !== 0) {
      obj.reqId = Math.round(message.reqId);
    }
    if (message.session !== undefined) {
      obj.session = Request_Session.toJSON(message.session);
    }
    if (message.room !== undefined) {
      obj.room = Request_Rooom.toJSON(message.room);
    }
    if (message.sender !== undefined) {
      obj.sender = Request_Sender.toJSON(message.sender);
    }
    if (message.receiver !== undefined) {
      obj.receiver = Request_Receiver.toJSON(message.receiver);
    }
    if (message.features !== undefined) {
      obj.features = Request1.toJSON(message.features);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Request>, I>>(base?: I): Request {
    return Request.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Request>, I>>(object: I): Request {
    const message = createBaseRequest();
    message.reqId = object.reqId ?? 0;
    message.session = (object.session !== undefined && object.session !== null)
      ? Request_Session.fromPartial(object.session)
      : undefined;
    message.room = (object.room !== undefined && object.room !== null)
      ? Request_Rooom.fromPartial(object.room)
      : undefined;
    message.sender = (object.sender !== undefined && object.sender !== null)
      ? Request_Sender.fromPartial(object.sender)
      : undefined;
    message.receiver = (object.receiver !== undefined && object.receiver !== null)
      ? Request_Receiver.fromPartial(object.receiver)
      : undefined;
    message.features = (object.features !== undefined && object.features !== null)
      ? Request1.fromPartial(object.features)
      : undefined;
    return message;
  },
};

function createBaseRequest_Session(): Request_Session {
  return { join: undefined, leave: undefined, sdp: undefined, disconnect: undefined };
}

export const Request_Session = {
  encode(message: Request_Session, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.join !== undefined) {
      Request_Session_Join.encode(message.join, writer.uint32(10).fork()).ldelim();
    }
    if (message.leave !== undefined) {
      Request_Session_Leave.encode(message.leave, writer.uint32(18).fork()).ldelim();
    }
    if (message.sdp !== undefined) {
      Request_Session_UpdateSdp.encode(message.sdp, writer.uint32(26).fork()).ldelim();
    }
    if (message.disconnect !== undefined) {
      Request_Session_Disconnect.encode(message.disconnect, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Request_Session {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequest_Session();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.join = Request_Session_Join.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.leave = Request_Session_Leave.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.sdp = Request_Session_UpdateSdp.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.disconnect = Request_Session_Disconnect.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Request_Session {
    return {
      join: isSet(object.join) ? Request_Session_Join.fromJSON(object.join) : undefined,
      leave: isSet(object.leave) ? Request_Session_Leave.fromJSON(object.leave) : undefined,
      sdp: isSet(object.sdp) ? Request_Session_UpdateSdp.fromJSON(object.sdp) : undefined,
      disconnect: isSet(object.disconnect) ? Request_Session_Disconnect.fromJSON(object.disconnect) : undefined,
    };
  },

  toJSON(message: Request_Session): unknown {
    const obj: any = {};
    if (message.join !== undefined) {
      obj.join = Request_Session_Join.toJSON(message.join);
    }
    if (message.leave !== undefined) {
      obj.leave = Request_Session_Leave.toJSON(message.leave);
    }
    if (message.sdp !== undefined) {
      obj.sdp = Request_Session_UpdateSdp.toJSON(message.sdp);
    }
    if (message.disconnect !== undefined) {
      obj.disconnect = Request_Session_Disconnect.toJSON(message.disconnect);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Request_Session>, I>>(base?: I): Request_Session {
    return Request_Session.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Request_Session>, I>>(object: I): Request_Session {
    const message = createBaseRequest_Session();
    message.join = (object.join !== undefined && object.join !== null)
      ? Request_Session_Join.fromPartial(object.join)
      : undefined;
    message.leave = (object.leave !== undefined && object.leave !== null)
      ? Request_Session_Leave.fromPartial(object.leave)
      : undefined;
    message.sdp = (object.sdp !== undefined && object.sdp !== null)
      ? Request_Session_UpdateSdp.fromPartial(object.sdp)
      : undefined;
    message.disconnect = (object.disconnect !== undefined && object.disconnect !== null)
      ? Request_Session_Disconnect.fromPartial(object.disconnect)
      : undefined;
    return message;
  },
};

function createBaseRequest_Session_Join(): Request_Session_Join {
  return { info: undefined, token: "" };
}

export const Request_Session_Join = {
  encode(message: Request_Session_Join, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.info !== undefined) {
      RoomJoin.encode(message.info, writer.uint32(10).fork()).ldelim();
    }
    if (message.token !== "") {
      writer.uint32(18).string(message.token);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Request_Session_Join {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequest_Session_Join();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.info = RoomJoin.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.token = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Request_Session_Join {
    return {
      info: isSet(object.info) ? RoomJoin.fromJSON(object.info) : undefined,
      token: isSet(object.token) ? globalThis.String(object.token) : "",
    };
  },

  toJSON(message: Request_Session_Join): unknown {
    const obj: any = {};
    if (message.info !== undefined) {
      obj.info = RoomJoin.toJSON(message.info);
    }
    if (message.token !== "") {
      obj.token = message.token;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Request_Session_Join>, I>>(base?: I): Request_Session_Join {
    return Request_Session_Join.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Request_Session_Join>, I>>(object: I): Request_Session_Join {
    const message = createBaseRequest_Session_Join();
    message.info = (object.info !== undefined && object.info !== null) ? RoomJoin.fromPartial(object.info) : undefined;
    message.token = object.token ?? "";
    return message;
  },
};

function createBaseRequest_Session_Leave(): Request_Session_Leave {
  return {};
}

export const Request_Session_Leave = {
  encode(_: Request_Session_Leave, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Request_Session_Leave {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequest_Session_Leave();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Request_Session_Leave {
    return {};
  },

  toJSON(_: Request_Session_Leave): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Request_Session_Leave>, I>>(base?: I): Request_Session_Leave {
    return Request_Session_Leave.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Request_Session_Leave>, I>>(_: I): Request_Session_Leave {
    const message = createBaseRequest_Session_Leave();
    return message;
  },
};

function createBaseRequest_Session_UpdateSdp(): Request_Session_UpdateSdp {
  return { tracks: undefined, sdp: "" };
}

export const Request_Session_UpdateSdp = {
  encode(message: Request_Session_UpdateSdp, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.tracks !== undefined) {
      Tracks.encode(message.tracks, writer.uint32(10).fork()).ldelim();
    }
    if (message.sdp !== "") {
      writer.uint32(18).string(message.sdp);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Request_Session_UpdateSdp {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequest_Session_UpdateSdp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.tracks = Tracks.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.sdp = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Request_Session_UpdateSdp {
    return {
      tracks: isSet(object.tracks) ? Tracks.fromJSON(object.tracks) : undefined,
      sdp: isSet(object.sdp) ? globalThis.String(object.sdp) : "",
    };
  },

  toJSON(message: Request_Session_UpdateSdp): unknown {
    const obj: any = {};
    if (message.tracks !== undefined) {
      obj.tracks = Tracks.toJSON(message.tracks);
    }
    if (message.sdp !== "") {
      obj.sdp = message.sdp;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Request_Session_UpdateSdp>, I>>(base?: I): Request_Session_UpdateSdp {
    return Request_Session_UpdateSdp.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Request_Session_UpdateSdp>, I>>(object: I): Request_Session_UpdateSdp {
    const message = createBaseRequest_Session_UpdateSdp();
    message.tracks = (object.tracks !== undefined && object.tracks !== null)
      ? Tracks.fromPartial(object.tracks)
      : undefined;
    message.sdp = object.sdp ?? "";
    return message;
  },
};

function createBaseRequest_Session_Disconnect(): Request_Session_Disconnect {
  return {};
}

export const Request_Session_Disconnect = {
  encode(_: Request_Session_Disconnect, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Request_Session_Disconnect {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequest_Session_Disconnect();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Request_Session_Disconnect {
    return {};
  },

  toJSON(_: Request_Session_Disconnect): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Request_Session_Disconnect>, I>>(base?: I): Request_Session_Disconnect {
    return Request_Session_Disconnect.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Request_Session_Disconnect>, I>>(_: I): Request_Session_Disconnect {
    const message = createBaseRequest_Session_Disconnect();
    return message;
  },
};

function createBaseRequest_Rooom(): Request_Rooom {
  return { subscribe: undefined, unsubscribe: undefined };
}

export const Request_Rooom = {
  encode(message: Request_Rooom, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.subscribe !== undefined) {
      Request_Rooom_SubscribePeer.encode(message.subscribe, writer.uint32(10).fork()).ldelim();
    }
    if (message.unsubscribe !== undefined) {
      Request_Rooom_UnsubscribePeer.encode(message.unsubscribe, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Request_Rooom {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequest_Rooom();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.subscribe = Request_Rooom_SubscribePeer.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.unsubscribe = Request_Rooom_UnsubscribePeer.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Request_Rooom {
    return {
      subscribe: isSet(object.subscribe) ? Request_Rooom_SubscribePeer.fromJSON(object.subscribe) : undefined,
      unsubscribe: isSet(object.unsubscribe) ? Request_Rooom_UnsubscribePeer.fromJSON(object.unsubscribe) : undefined,
    };
  },

  toJSON(message: Request_Rooom): unknown {
    const obj: any = {};
    if (message.subscribe !== undefined) {
      obj.subscribe = Request_Rooom_SubscribePeer.toJSON(message.subscribe);
    }
    if (message.unsubscribe !== undefined) {
      obj.unsubscribe = Request_Rooom_UnsubscribePeer.toJSON(message.unsubscribe);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Request_Rooom>, I>>(base?: I): Request_Rooom {
    return Request_Rooom.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Request_Rooom>, I>>(object: I): Request_Rooom {
    const message = createBaseRequest_Rooom();
    message.subscribe = (object.subscribe !== undefined && object.subscribe !== null)
      ? Request_Rooom_SubscribePeer.fromPartial(object.subscribe)
      : undefined;
    message.unsubscribe = (object.unsubscribe !== undefined && object.unsubscribe !== null)
      ? Request_Rooom_UnsubscribePeer.fromPartial(object.unsubscribe)
      : undefined;
    return message;
  },
};

function createBaseRequest_Rooom_SubscribePeer(): Request_Rooom_SubscribePeer {
  return { peer: "" };
}

export const Request_Rooom_SubscribePeer = {
  encode(message: Request_Rooom_SubscribePeer, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.peer !== "") {
      writer.uint32(10).string(message.peer);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Request_Rooom_SubscribePeer {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequest_Rooom_SubscribePeer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.peer = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Request_Rooom_SubscribePeer {
    return { peer: isSet(object.peer) ? globalThis.String(object.peer) : "" };
  },

  toJSON(message: Request_Rooom_SubscribePeer): unknown {
    const obj: any = {};
    if (message.peer !== "") {
      obj.peer = message.peer;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Request_Rooom_SubscribePeer>, I>>(base?: I): Request_Rooom_SubscribePeer {
    return Request_Rooom_SubscribePeer.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Request_Rooom_SubscribePeer>, I>>(object: I): Request_Rooom_SubscribePeer {
    const message = createBaseRequest_Rooom_SubscribePeer();
    message.peer = object.peer ?? "";
    return message;
  },
};

function createBaseRequest_Rooom_UnsubscribePeer(): Request_Rooom_UnsubscribePeer {
  return { peer: "" };
}

export const Request_Rooom_UnsubscribePeer = {
  encode(message: Request_Rooom_UnsubscribePeer, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.peer !== "") {
      writer.uint32(10).string(message.peer);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Request_Rooom_UnsubscribePeer {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequest_Rooom_UnsubscribePeer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.peer = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Request_Rooom_UnsubscribePeer {
    return { peer: isSet(object.peer) ? globalThis.String(object.peer) : "" };
  },

  toJSON(message: Request_Rooom_UnsubscribePeer): unknown {
    const obj: any = {};
    if (message.peer !== "") {
      obj.peer = message.peer;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Request_Rooom_UnsubscribePeer>, I>>(base?: I): Request_Rooom_UnsubscribePeer {
    return Request_Rooom_UnsubscribePeer.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Request_Rooom_UnsubscribePeer>, I>>(
    object: I,
  ): Request_Rooom_UnsubscribePeer {
    const message = createBaseRequest_Rooom_UnsubscribePeer();
    message.peer = object.peer ?? "";
    return message;
  },
};

function createBaseRequest_Sender(): Request_Sender {
  return { name: "", attach: undefined, detach: undefined, config: undefined };
}

export const Request_Sender = {
  encode(message: Request_Sender, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.attach !== undefined) {
      Request_Sender_Attach.encode(message.attach, writer.uint32(18).fork()).ldelim();
    }
    if (message.detach !== undefined) {
      Request_Sender_Detach.encode(message.detach, writer.uint32(26).fork()).ldelim();
    }
    if (message.config !== undefined) {
      Sender_Config.encode(message.config, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Request_Sender {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequest_Sender();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.attach = Request_Sender_Attach.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.detach = Request_Sender_Detach.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.config = Sender_Config.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Request_Sender {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      attach: isSet(object.attach) ? Request_Sender_Attach.fromJSON(object.attach) : undefined,
      detach: isSet(object.detach) ? Request_Sender_Detach.fromJSON(object.detach) : undefined,
      config: isSet(object.config) ? Sender_Config.fromJSON(object.config) : undefined,
    };
  },

  toJSON(message: Request_Sender): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.attach !== undefined) {
      obj.attach = Request_Sender_Attach.toJSON(message.attach);
    }
    if (message.detach !== undefined) {
      obj.detach = Request_Sender_Detach.toJSON(message.detach);
    }
    if (message.config !== undefined) {
      obj.config = Sender_Config.toJSON(message.config);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Request_Sender>, I>>(base?: I): Request_Sender {
    return Request_Sender.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Request_Sender>, I>>(object: I): Request_Sender {
    const message = createBaseRequest_Sender();
    message.name = object.name ?? "";
    message.attach = (object.attach !== undefined && object.attach !== null)
      ? Request_Sender_Attach.fromPartial(object.attach)
      : undefined;
    message.detach = (object.detach !== undefined && object.detach !== null)
      ? Request_Sender_Detach.fromPartial(object.detach)
      : undefined;
    message.config = (object.config !== undefined && object.config !== null)
      ? Sender_Config.fromPartial(object.config)
      : undefined;
    return message;
  },
};

function createBaseRequest_Sender_Attach(): Request_Sender_Attach {
  return { source: undefined, config: undefined };
}

export const Request_Sender_Attach = {
  encode(message: Request_Sender_Attach, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.source !== undefined) {
      Sender_Source.encode(message.source, writer.uint32(10).fork()).ldelim();
    }
    if (message.config !== undefined) {
      Sender_Config.encode(message.config, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Request_Sender_Attach {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequest_Sender_Attach();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.source = Sender_Source.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.config = Sender_Config.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Request_Sender_Attach {
    return {
      source: isSet(object.source) ? Sender_Source.fromJSON(object.source) : undefined,
      config: isSet(object.config) ? Sender_Config.fromJSON(object.config) : undefined,
    };
  },

  toJSON(message: Request_Sender_Attach): unknown {
    const obj: any = {};
    if (message.source !== undefined) {
      obj.source = Sender_Source.toJSON(message.source);
    }
    if (message.config !== undefined) {
      obj.config = Sender_Config.toJSON(message.config);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Request_Sender_Attach>, I>>(base?: I): Request_Sender_Attach {
    return Request_Sender_Attach.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Request_Sender_Attach>, I>>(object: I): Request_Sender_Attach {
    const message = createBaseRequest_Sender_Attach();
    message.source = (object.source !== undefined && object.source !== null)
      ? Sender_Source.fromPartial(object.source)
      : undefined;
    message.config = (object.config !== undefined && object.config !== null)
      ? Sender_Config.fromPartial(object.config)
      : undefined;
    return message;
  },
};

function createBaseRequest_Sender_Detach(): Request_Sender_Detach {
  return {};
}

export const Request_Sender_Detach = {
  encode(_: Request_Sender_Detach, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Request_Sender_Detach {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequest_Sender_Detach();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Request_Sender_Detach {
    return {};
  },

  toJSON(_: Request_Sender_Detach): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Request_Sender_Detach>, I>>(base?: I): Request_Sender_Detach {
    return Request_Sender_Detach.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Request_Sender_Detach>, I>>(_: I): Request_Sender_Detach {
    const message = createBaseRequest_Sender_Detach();
    return message;
  },
};

function createBaseRequest_Receiver(): Request_Receiver {
  return { name: "", attach: undefined, detach: undefined, config: undefined };
}

export const Request_Receiver = {
  encode(message: Request_Receiver, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.attach !== undefined) {
      Request_Receiver_Attach.encode(message.attach, writer.uint32(18).fork()).ldelim();
    }
    if (message.detach !== undefined) {
      Request_Receiver_Detach.encode(message.detach, writer.uint32(26).fork()).ldelim();
    }
    if (message.config !== undefined) {
      Receiver_Config.encode(message.config, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Request_Receiver {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequest_Receiver();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.attach = Request_Receiver_Attach.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.detach = Request_Receiver_Detach.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.config = Receiver_Config.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Request_Receiver {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      attach: isSet(object.attach) ? Request_Receiver_Attach.fromJSON(object.attach) : undefined,
      detach: isSet(object.detach) ? Request_Receiver_Detach.fromJSON(object.detach) : undefined,
      config: isSet(object.config) ? Receiver_Config.fromJSON(object.config) : undefined,
    };
  },

  toJSON(message: Request_Receiver): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.attach !== undefined) {
      obj.attach = Request_Receiver_Attach.toJSON(message.attach);
    }
    if (message.detach !== undefined) {
      obj.detach = Request_Receiver_Detach.toJSON(message.detach);
    }
    if (message.config !== undefined) {
      obj.config = Receiver_Config.toJSON(message.config);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Request_Receiver>, I>>(base?: I): Request_Receiver {
    return Request_Receiver.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Request_Receiver>, I>>(object: I): Request_Receiver {
    const message = createBaseRequest_Receiver();
    message.name = object.name ?? "";
    message.attach = (object.attach !== undefined && object.attach !== null)
      ? Request_Receiver_Attach.fromPartial(object.attach)
      : undefined;
    message.detach = (object.detach !== undefined && object.detach !== null)
      ? Request_Receiver_Detach.fromPartial(object.detach)
      : undefined;
    message.config = (object.config !== undefined && object.config !== null)
      ? Receiver_Config.fromPartial(object.config)
      : undefined;
    return message;
  },
};

function createBaseRequest_Receiver_Attach(): Request_Receiver_Attach {
  return { source: undefined, config: undefined };
}

export const Request_Receiver_Attach = {
  encode(message: Request_Receiver_Attach, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.source !== undefined) {
      Receiver_Source.encode(message.source, writer.uint32(10).fork()).ldelim();
    }
    if (message.config !== undefined) {
      Receiver_Config.encode(message.config, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Request_Receiver_Attach {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequest_Receiver_Attach();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.source = Receiver_Source.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.config = Receiver_Config.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Request_Receiver_Attach {
    return {
      source: isSet(object.source) ? Receiver_Source.fromJSON(object.source) : undefined,
      config: isSet(object.config) ? Receiver_Config.fromJSON(object.config) : undefined,
    };
  },

  toJSON(message: Request_Receiver_Attach): unknown {
    const obj: any = {};
    if (message.source !== undefined) {
      obj.source = Receiver_Source.toJSON(message.source);
    }
    if (message.config !== undefined) {
      obj.config = Receiver_Config.toJSON(message.config);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Request_Receiver_Attach>, I>>(base?: I): Request_Receiver_Attach {
    return Request_Receiver_Attach.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Request_Receiver_Attach>, I>>(object: I): Request_Receiver_Attach {
    const message = createBaseRequest_Receiver_Attach();
    message.source = (object.source !== undefined && object.source !== null)
      ? Receiver_Source.fromPartial(object.source)
      : undefined;
    message.config = (object.config !== undefined && object.config !== null)
      ? Receiver_Config.fromPartial(object.config)
      : undefined;
    return message;
  },
};

function createBaseRequest_Receiver_Detach(): Request_Receiver_Detach {
  return {};
}

export const Request_Receiver_Detach = {
  encode(_: Request_Receiver_Detach, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Request_Receiver_Detach {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequest_Receiver_Detach();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Request_Receiver_Detach {
    return {};
  },

  toJSON(_: Request_Receiver_Detach): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Request_Receiver_Detach>, I>>(base?: I): Request_Receiver_Detach {
    return Request_Receiver_Detach.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Request_Receiver_Detach>, I>>(_: I): Request_Receiver_Detach {
    const message = createBaseRequest_Receiver_Detach();
    return message;
  },
};

function createBaseResponse(): Response {
  return {
    reqId: 0,
    error: undefined,
    session: undefined,
    room: undefined,
    sender: undefined,
    receiver: undefined,
    features: undefined,
  };
}

export const Response = {
  encode(message: Response, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.reqId !== 0) {
      writer.uint32(8).uint32(message.reqId);
    }
    if (message.error !== undefined) {
      Error.encode(message.error, writer.uint32(18).fork()).ldelim();
    }
    if (message.session !== undefined) {
      Response_Session.encode(message.session, writer.uint32(26).fork()).ldelim();
    }
    if (message.room !== undefined) {
      Response_Room.encode(message.room, writer.uint32(34).fork()).ldelim();
    }
    if (message.sender !== undefined) {
      Response_Sender.encode(message.sender, writer.uint32(42).fork()).ldelim();
    }
    if (message.receiver !== undefined) {
      Response_Receiver.encode(message.receiver, writer.uint32(50).fork()).ldelim();
    }
    if (message.features !== undefined) {
      Response2.encode(message.features, writer.uint32(58).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Response {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.reqId = reader.uint32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.error = Error.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.session = Response_Session.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.room = Response_Room.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.sender = Response_Sender.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.receiver = Response_Receiver.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.features = Response2.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Response {
    return {
      reqId: isSet(object.reqId) ? globalThis.Number(object.reqId) : 0,
      error: isSet(object.error) ? Error.fromJSON(object.error) : undefined,
      session: isSet(object.session) ? Response_Session.fromJSON(object.session) : undefined,
      room: isSet(object.room) ? Response_Room.fromJSON(object.room) : undefined,
      sender: isSet(object.sender) ? Response_Sender.fromJSON(object.sender) : undefined,
      receiver: isSet(object.receiver) ? Response_Receiver.fromJSON(object.receiver) : undefined,
      features: isSet(object.features) ? Response2.fromJSON(object.features) : undefined,
    };
  },

  toJSON(message: Response): unknown {
    const obj: any = {};
    if (message.reqId !== 0) {
      obj.reqId = Math.round(message.reqId);
    }
    if (message.error !== undefined) {
      obj.error = Error.toJSON(message.error);
    }
    if (message.session !== undefined) {
      obj.session = Response_Session.toJSON(message.session);
    }
    if (message.room !== undefined) {
      obj.room = Response_Room.toJSON(message.room);
    }
    if (message.sender !== undefined) {
      obj.sender = Response_Sender.toJSON(message.sender);
    }
    if (message.receiver !== undefined) {
      obj.receiver = Response_Receiver.toJSON(message.receiver);
    }
    if (message.features !== undefined) {
      obj.features = Response2.toJSON(message.features);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Response>, I>>(base?: I): Response {
    return Response.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Response>, I>>(object: I): Response {
    const message = createBaseResponse();
    message.reqId = object.reqId ?? 0;
    message.error = (object.error !== undefined && object.error !== null) ? Error.fromPartial(object.error) : undefined;
    message.session = (object.session !== undefined && object.session !== null)
      ? Response_Session.fromPartial(object.session)
      : undefined;
    message.room = (object.room !== undefined && object.room !== null)
      ? Response_Room.fromPartial(object.room)
      : undefined;
    message.sender = (object.sender !== undefined && object.sender !== null)
      ? Response_Sender.fromPartial(object.sender)
      : undefined;
    message.receiver = (object.receiver !== undefined && object.receiver !== null)
      ? Response_Receiver.fromPartial(object.receiver)
      : undefined;
    message.features = (object.features !== undefined && object.features !== null)
      ? Response2.fromPartial(object.features)
      : undefined;
    return message;
  },
};

function createBaseResponse_Session(): Response_Session {
  return { join: undefined, leave: undefined, sdp: undefined, disconnect: undefined };
}

export const Response_Session = {
  encode(message: Response_Session, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.join !== undefined) {
      Response_Session_Join.encode(message.join, writer.uint32(10).fork()).ldelim();
    }
    if (message.leave !== undefined) {
      Response_Session_Leave.encode(message.leave, writer.uint32(18).fork()).ldelim();
    }
    if (message.sdp !== undefined) {
      Response_Session_UpdateSdp.encode(message.sdp, writer.uint32(26).fork()).ldelim();
    }
    if (message.disconnect !== undefined) {
      Response_Session_Disconnect.encode(message.disconnect, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Response_Session {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponse_Session();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.join = Response_Session_Join.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.leave = Response_Session_Leave.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.sdp = Response_Session_UpdateSdp.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.disconnect = Response_Session_Disconnect.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Response_Session {
    return {
      join: isSet(object.join) ? Response_Session_Join.fromJSON(object.join) : undefined,
      leave: isSet(object.leave) ? Response_Session_Leave.fromJSON(object.leave) : undefined,
      sdp: isSet(object.sdp) ? Response_Session_UpdateSdp.fromJSON(object.sdp) : undefined,
      disconnect: isSet(object.disconnect) ? Response_Session_Disconnect.fromJSON(object.disconnect) : undefined,
    };
  },

  toJSON(message: Response_Session): unknown {
    const obj: any = {};
    if (message.join !== undefined) {
      obj.join = Response_Session_Join.toJSON(message.join);
    }
    if (message.leave !== undefined) {
      obj.leave = Response_Session_Leave.toJSON(message.leave);
    }
    if (message.sdp !== undefined) {
      obj.sdp = Response_Session_UpdateSdp.toJSON(message.sdp);
    }
    if (message.disconnect !== undefined) {
      obj.disconnect = Response_Session_Disconnect.toJSON(message.disconnect);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Response_Session>, I>>(base?: I): Response_Session {
    return Response_Session.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Response_Session>, I>>(object: I): Response_Session {
    const message = createBaseResponse_Session();
    message.join = (object.join !== undefined && object.join !== null)
      ? Response_Session_Join.fromPartial(object.join)
      : undefined;
    message.leave = (object.leave !== undefined && object.leave !== null)
      ? Response_Session_Leave.fromPartial(object.leave)
      : undefined;
    message.sdp = (object.sdp !== undefined && object.sdp !== null)
      ? Response_Session_UpdateSdp.fromPartial(object.sdp)
      : undefined;
    message.disconnect = (object.disconnect !== undefined && object.disconnect !== null)
      ? Response_Session_Disconnect.fromPartial(object.disconnect)
      : undefined;
    return message;
  },
};

function createBaseResponse_Session_Join(): Response_Session_Join {
  return {};
}

export const Response_Session_Join = {
  encode(_: Response_Session_Join, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Response_Session_Join {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponse_Session_Join();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Response_Session_Join {
    return {};
  },

  toJSON(_: Response_Session_Join): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Response_Session_Join>, I>>(base?: I): Response_Session_Join {
    return Response_Session_Join.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Response_Session_Join>, I>>(_: I): Response_Session_Join {
    const message = createBaseResponse_Session_Join();
    return message;
  },
};

function createBaseResponse_Session_Leave(): Response_Session_Leave {
  return {};
}

export const Response_Session_Leave = {
  encode(_: Response_Session_Leave, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Response_Session_Leave {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponse_Session_Leave();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Response_Session_Leave {
    return {};
  },

  toJSON(_: Response_Session_Leave): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Response_Session_Leave>, I>>(base?: I): Response_Session_Leave {
    return Response_Session_Leave.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Response_Session_Leave>, I>>(_: I): Response_Session_Leave {
    const message = createBaseResponse_Session_Leave();
    return message;
  },
};

function createBaseResponse_Session_UpdateSdp(): Response_Session_UpdateSdp {
  return { sdp: "" };
}

export const Response_Session_UpdateSdp = {
  encode(message: Response_Session_UpdateSdp, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.sdp !== "") {
      writer.uint32(10).string(message.sdp);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Response_Session_UpdateSdp {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponse_Session_UpdateSdp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sdp = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Response_Session_UpdateSdp {
    return { sdp: isSet(object.sdp) ? globalThis.String(object.sdp) : "" };
  },

  toJSON(message: Response_Session_UpdateSdp): unknown {
    const obj: any = {};
    if (message.sdp !== "") {
      obj.sdp = message.sdp;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Response_Session_UpdateSdp>, I>>(base?: I): Response_Session_UpdateSdp {
    return Response_Session_UpdateSdp.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Response_Session_UpdateSdp>, I>>(object: I): Response_Session_UpdateSdp {
    const message = createBaseResponse_Session_UpdateSdp();
    message.sdp = object.sdp ?? "";
    return message;
  },
};

function createBaseResponse_Session_Disconnect(): Response_Session_Disconnect {
  return {};
}

export const Response_Session_Disconnect = {
  encode(_: Response_Session_Disconnect, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Response_Session_Disconnect {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponse_Session_Disconnect();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Response_Session_Disconnect {
    return {};
  },

  toJSON(_: Response_Session_Disconnect): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Response_Session_Disconnect>, I>>(base?: I): Response_Session_Disconnect {
    return Response_Session_Disconnect.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Response_Session_Disconnect>, I>>(_: I): Response_Session_Disconnect {
    const message = createBaseResponse_Session_Disconnect();
    return message;
  },
};

function createBaseResponse_Room(): Response_Room {
  return { subscribe: undefined, unsubscribe: undefined };
}

export const Response_Room = {
  encode(message: Response_Room, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.subscribe !== undefined) {
      Response_Room_SubscribePeer.encode(message.subscribe, writer.uint32(10).fork()).ldelim();
    }
    if (message.unsubscribe !== undefined) {
      Response_Room_UnsubscribePeer.encode(message.unsubscribe, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Response_Room {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponse_Room();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.subscribe = Response_Room_SubscribePeer.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.unsubscribe = Response_Room_UnsubscribePeer.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Response_Room {
    return {
      subscribe: isSet(object.subscribe) ? Response_Room_SubscribePeer.fromJSON(object.subscribe) : undefined,
      unsubscribe: isSet(object.unsubscribe) ? Response_Room_UnsubscribePeer.fromJSON(object.unsubscribe) : undefined,
    };
  },

  toJSON(message: Response_Room): unknown {
    const obj: any = {};
    if (message.subscribe !== undefined) {
      obj.subscribe = Response_Room_SubscribePeer.toJSON(message.subscribe);
    }
    if (message.unsubscribe !== undefined) {
      obj.unsubscribe = Response_Room_UnsubscribePeer.toJSON(message.unsubscribe);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Response_Room>, I>>(base?: I): Response_Room {
    return Response_Room.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Response_Room>, I>>(object: I): Response_Room {
    const message = createBaseResponse_Room();
    message.subscribe = (object.subscribe !== undefined && object.subscribe !== null)
      ? Response_Room_SubscribePeer.fromPartial(object.subscribe)
      : undefined;
    message.unsubscribe = (object.unsubscribe !== undefined && object.unsubscribe !== null)
      ? Response_Room_UnsubscribePeer.fromPartial(object.unsubscribe)
      : undefined;
    return message;
  },
};

function createBaseResponse_Room_SubscribePeer(): Response_Room_SubscribePeer {
  return {};
}

export const Response_Room_SubscribePeer = {
  encode(_: Response_Room_SubscribePeer, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Response_Room_SubscribePeer {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponse_Room_SubscribePeer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Response_Room_SubscribePeer {
    return {};
  },

  toJSON(_: Response_Room_SubscribePeer): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Response_Room_SubscribePeer>, I>>(base?: I): Response_Room_SubscribePeer {
    return Response_Room_SubscribePeer.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Response_Room_SubscribePeer>, I>>(_: I): Response_Room_SubscribePeer {
    const message = createBaseResponse_Room_SubscribePeer();
    return message;
  },
};

function createBaseResponse_Room_UnsubscribePeer(): Response_Room_UnsubscribePeer {
  return {};
}

export const Response_Room_UnsubscribePeer = {
  encode(_: Response_Room_UnsubscribePeer, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Response_Room_UnsubscribePeer {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponse_Room_UnsubscribePeer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Response_Room_UnsubscribePeer {
    return {};
  },

  toJSON(_: Response_Room_UnsubscribePeer): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Response_Room_UnsubscribePeer>, I>>(base?: I): Response_Room_UnsubscribePeer {
    return Response_Room_UnsubscribePeer.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Response_Room_UnsubscribePeer>, I>>(_: I): Response_Room_UnsubscribePeer {
    const message = createBaseResponse_Room_UnsubscribePeer();
    return message;
  },
};

function createBaseResponse_Sender(): Response_Sender {
  return { attach: undefined, detach: undefined, config: undefined };
}

export const Response_Sender = {
  encode(message: Response_Sender, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.attach !== undefined) {
      Response_Sender_Attach.encode(message.attach, writer.uint32(10).fork()).ldelim();
    }
    if (message.detach !== undefined) {
      Response_Sender_Detach.encode(message.detach, writer.uint32(18).fork()).ldelim();
    }
    if (message.config !== undefined) {
      Response_Sender_Config.encode(message.config, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Response_Sender {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponse_Sender();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.attach = Response_Sender_Attach.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.detach = Response_Sender_Detach.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.config = Response_Sender_Config.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Response_Sender {
    return {
      attach: isSet(object.attach) ? Response_Sender_Attach.fromJSON(object.attach) : undefined,
      detach: isSet(object.detach) ? Response_Sender_Detach.fromJSON(object.detach) : undefined,
      config: isSet(object.config) ? Response_Sender_Config.fromJSON(object.config) : undefined,
    };
  },

  toJSON(message: Response_Sender): unknown {
    const obj: any = {};
    if (message.attach !== undefined) {
      obj.attach = Response_Sender_Attach.toJSON(message.attach);
    }
    if (message.detach !== undefined) {
      obj.detach = Response_Sender_Detach.toJSON(message.detach);
    }
    if (message.config !== undefined) {
      obj.config = Response_Sender_Config.toJSON(message.config);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Response_Sender>, I>>(base?: I): Response_Sender {
    return Response_Sender.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Response_Sender>, I>>(object: I): Response_Sender {
    const message = createBaseResponse_Sender();
    message.attach = (object.attach !== undefined && object.attach !== null)
      ? Response_Sender_Attach.fromPartial(object.attach)
      : undefined;
    message.detach = (object.detach !== undefined && object.detach !== null)
      ? Response_Sender_Detach.fromPartial(object.detach)
      : undefined;
    message.config = (object.config !== undefined && object.config !== null)
      ? Response_Sender_Config.fromPartial(object.config)
      : undefined;
    return message;
  },
};

function createBaseResponse_Sender_Attach(): Response_Sender_Attach {
  return {};
}

export const Response_Sender_Attach = {
  encode(_: Response_Sender_Attach, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Response_Sender_Attach {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponse_Sender_Attach();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Response_Sender_Attach {
    return {};
  },

  toJSON(_: Response_Sender_Attach): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Response_Sender_Attach>, I>>(base?: I): Response_Sender_Attach {
    return Response_Sender_Attach.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Response_Sender_Attach>, I>>(_: I): Response_Sender_Attach {
    const message = createBaseResponse_Sender_Attach();
    return message;
  },
};

function createBaseResponse_Sender_Detach(): Response_Sender_Detach {
  return {};
}

export const Response_Sender_Detach = {
  encode(_: Response_Sender_Detach, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Response_Sender_Detach {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponse_Sender_Detach();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Response_Sender_Detach {
    return {};
  },

  toJSON(_: Response_Sender_Detach): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Response_Sender_Detach>, I>>(base?: I): Response_Sender_Detach {
    return Response_Sender_Detach.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Response_Sender_Detach>, I>>(_: I): Response_Sender_Detach {
    const message = createBaseResponse_Sender_Detach();
    return message;
  },
};

function createBaseResponse_Sender_Config(): Response_Sender_Config {
  return {};
}

export const Response_Sender_Config = {
  encode(_: Response_Sender_Config, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Response_Sender_Config {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponse_Sender_Config();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Response_Sender_Config {
    return {};
  },

  toJSON(_: Response_Sender_Config): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Response_Sender_Config>, I>>(base?: I): Response_Sender_Config {
    return Response_Sender_Config.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Response_Sender_Config>, I>>(_: I): Response_Sender_Config {
    const message = createBaseResponse_Sender_Config();
    return message;
  },
};

function createBaseResponse_Receiver(): Response_Receiver {
  return { attach: undefined, detach: undefined, config: undefined };
}

export const Response_Receiver = {
  encode(message: Response_Receiver, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.attach !== undefined) {
      Response_Receiver_Attach.encode(message.attach, writer.uint32(10).fork()).ldelim();
    }
    if (message.detach !== undefined) {
      Response_Receiver_Detach.encode(message.detach, writer.uint32(18).fork()).ldelim();
    }
    if (message.config !== undefined) {
      Response_Receiver_Config.encode(message.config, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Response_Receiver {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponse_Receiver();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.attach = Response_Receiver_Attach.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.detach = Response_Receiver_Detach.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.config = Response_Receiver_Config.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Response_Receiver {
    return {
      attach: isSet(object.attach) ? Response_Receiver_Attach.fromJSON(object.attach) : undefined,
      detach: isSet(object.detach) ? Response_Receiver_Detach.fromJSON(object.detach) : undefined,
      config: isSet(object.config) ? Response_Receiver_Config.fromJSON(object.config) : undefined,
    };
  },

  toJSON(message: Response_Receiver): unknown {
    const obj: any = {};
    if (message.attach !== undefined) {
      obj.attach = Response_Receiver_Attach.toJSON(message.attach);
    }
    if (message.detach !== undefined) {
      obj.detach = Response_Receiver_Detach.toJSON(message.detach);
    }
    if (message.config !== undefined) {
      obj.config = Response_Receiver_Config.toJSON(message.config);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Response_Receiver>, I>>(base?: I): Response_Receiver {
    return Response_Receiver.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Response_Receiver>, I>>(object: I): Response_Receiver {
    const message = createBaseResponse_Receiver();
    message.attach = (object.attach !== undefined && object.attach !== null)
      ? Response_Receiver_Attach.fromPartial(object.attach)
      : undefined;
    message.detach = (object.detach !== undefined && object.detach !== null)
      ? Response_Receiver_Detach.fromPartial(object.detach)
      : undefined;
    message.config = (object.config !== undefined && object.config !== null)
      ? Response_Receiver_Config.fromPartial(object.config)
      : undefined;
    return message;
  },
};

function createBaseResponse_Receiver_Attach(): Response_Receiver_Attach {
  return {};
}

export const Response_Receiver_Attach = {
  encode(_: Response_Receiver_Attach, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Response_Receiver_Attach {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponse_Receiver_Attach();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Response_Receiver_Attach {
    return {};
  },

  toJSON(_: Response_Receiver_Attach): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Response_Receiver_Attach>, I>>(base?: I): Response_Receiver_Attach {
    return Response_Receiver_Attach.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Response_Receiver_Attach>, I>>(_: I): Response_Receiver_Attach {
    const message = createBaseResponse_Receiver_Attach();
    return message;
  },
};

function createBaseResponse_Receiver_Detach(): Response_Receiver_Detach {
  return {};
}

export const Response_Receiver_Detach = {
  encode(_: Response_Receiver_Detach, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Response_Receiver_Detach {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponse_Receiver_Detach();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Response_Receiver_Detach {
    return {};
  },

  toJSON(_: Response_Receiver_Detach): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Response_Receiver_Detach>, I>>(base?: I): Response_Receiver_Detach {
    return Response_Receiver_Detach.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Response_Receiver_Detach>, I>>(_: I): Response_Receiver_Detach {
    const message = createBaseResponse_Receiver_Detach();
    return message;
  },
};

function createBaseResponse_Receiver_Config(): Response_Receiver_Config {
  return {};
}

export const Response_Receiver_Config = {
  encode(_: Response_Receiver_Config, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Response_Receiver_Config {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponse_Receiver_Config();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Response_Receiver_Config {
    return {};
  },

  toJSON(_: Response_Receiver_Config): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Response_Receiver_Config>, I>>(base?: I): Response_Receiver_Config {
    return Response_Receiver_Config.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Response_Receiver_Config>, I>>(_: I): Response_Receiver_Config {
    const message = createBaseResponse_Receiver_Config();
    return message;
  },
};

function createBaseServerEvent(): ServerEvent {
  return {
    seq: 0,
    session: undefined,
    room: undefined,
    sender: undefined,
    receiver: undefined,
    response: undefined,
    features: undefined,
  };
}

export const ServerEvent = {
  encode(message: ServerEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.seq !== 0) {
      writer.uint32(8).uint32(message.seq);
    }
    if (message.session !== undefined) {
      ServerEvent_Session.encode(message.session, writer.uint32(18).fork()).ldelim();
    }
    if (message.room !== undefined) {
      ServerEvent_Room.encode(message.room, writer.uint32(26).fork()).ldelim();
    }
    if (message.sender !== undefined) {
      ServerEvent_Sender.encode(message.sender, writer.uint32(34).fork()).ldelim();
    }
    if (message.receiver !== undefined) {
      ServerEvent_Receiver.encode(message.receiver, writer.uint32(42).fork()).ldelim();
    }
    if (message.response !== undefined) {
      Response.encode(message.response, writer.uint32(50).fork()).ldelim();
    }
    if (message.features !== undefined) {
      ServerEvent3.encode(message.features, writer.uint32(58).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ServerEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServerEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.seq = reader.uint32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.session = ServerEvent_Session.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.room = ServerEvent_Room.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.sender = ServerEvent_Sender.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.receiver = ServerEvent_Receiver.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.response = Response.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.features = ServerEvent3.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServerEvent {
    return {
      seq: isSet(object.seq) ? globalThis.Number(object.seq) : 0,
      session: isSet(object.session) ? ServerEvent_Session.fromJSON(object.session) : undefined,
      room: isSet(object.room) ? ServerEvent_Room.fromJSON(object.room) : undefined,
      sender: isSet(object.sender) ? ServerEvent_Sender.fromJSON(object.sender) : undefined,
      receiver: isSet(object.receiver) ? ServerEvent_Receiver.fromJSON(object.receiver) : undefined,
      response: isSet(object.response) ? Response.fromJSON(object.response) : undefined,
      features: isSet(object.features) ? ServerEvent3.fromJSON(object.features) : undefined,
    };
  },

  toJSON(message: ServerEvent): unknown {
    const obj: any = {};
    if (message.seq !== 0) {
      obj.seq = Math.round(message.seq);
    }
    if (message.session !== undefined) {
      obj.session = ServerEvent_Session.toJSON(message.session);
    }
    if (message.room !== undefined) {
      obj.room = ServerEvent_Room.toJSON(message.room);
    }
    if (message.sender !== undefined) {
      obj.sender = ServerEvent_Sender.toJSON(message.sender);
    }
    if (message.receiver !== undefined) {
      obj.receiver = ServerEvent_Receiver.toJSON(message.receiver);
    }
    if (message.response !== undefined) {
      obj.response = Response.toJSON(message.response);
    }
    if (message.features !== undefined) {
      obj.features = ServerEvent3.toJSON(message.features);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ServerEvent>, I>>(base?: I): ServerEvent {
    return ServerEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ServerEvent>, I>>(object: I): ServerEvent {
    const message = createBaseServerEvent();
    message.seq = object.seq ?? 0;
    message.session = (object.session !== undefined && object.session !== null)
      ? ServerEvent_Session.fromPartial(object.session)
      : undefined;
    message.room = (object.room !== undefined && object.room !== null)
      ? ServerEvent_Room.fromPartial(object.room)
      : undefined;
    message.sender = (object.sender !== undefined && object.sender !== null)
      ? ServerEvent_Sender.fromPartial(object.sender)
      : undefined;
    message.receiver = (object.receiver !== undefined && object.receiver !== null)
      ? ServerEvent_Receiver.fromPartial(object.receiver)
      : undefined;
    message.response = (object.response !== undefined && object.response !== null)
      ? Response.fromPartial(object.response)
      : undefined;
    message.features = (object.features !== undefined && object.features !== null)
      ? ServerEvent3.fromPartial(object.features)
      : undefined;
    return message;
  },
};

function createBaseServerEvent_Session(): ServerEvent_Session {
  return { connected: undefined, joined: undefined, leaved: undefined, disconnected: undefined, goway: undefined };
}

export const ServerEvent_Session = {
  encode(message: ServerEvent_Session, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.connected !== undefined) {
      ServerEvent_Session_Connected.encode(message.connected, writer.uint32(10).fork()).ldelim();
    }
    if (message.joined !== undefined) {
      ServerEvent_Session_JoinedRoom.encode(message.joined, writer.uint32(18).fork()).ldelim();
    }
    if (message.leaved !== undefined) {
      ServerEvent_Session_LeavedRoom.encode(message.leaved, writer.uint32(26).fork()).ldelim();
    }
    if (message.disconnected !== undefined) {
      ServerEvent_Session_Disconnected.encode(message.disconnected, writer.uint32(34).fork()).ldelim();
    }
    if (message.goway !== undefined) {
      ServerEvent_Session_GoAway.encode(message.goway, writer.uint32(42).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ServerEvent_Session {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServerEvent_Session();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.connected = ServerEvent_Session_Connected.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.joined = ServerEvent_Session_JoinedRoom.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.leaved = ServerEvent_Session_LeavedRoom.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.disconnected = ServerEvent_Session_Disconnected.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.goway = ServerEvent_Session_GoAway.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServerEvent_Session {
    return {
      connected: isSet(object.connected) ? ServerEvent_Session_Connected.fromJSON(object.connected) : undefined,
      joined: isSet(object.joined) ? ServerEvent_Session_JoinedRoom.fromJSON(object.joined) : undefined,
      leaved: isSet(object.leaved) ? ServerEvent_Session_LeavedRoom.fromJSON(object.leaved) : undefined,
      disconnected: isSet(object.disconnected)
        ? ServerEvent_Session_Disconnected.fromJSON(object.disconnected)
        : undefined,
      goway: isSet(object.goway) ? ServerEvent_Session_GoAway.fromJSON(object.goway) : undefined,
    };
  },

  toJSON(message: ServerEvent_Session): unknown {
    const obj: any = {};
    if (message.connected !== undefined) {
      obj.connected = ServerEvent_Session_Connected.toJSON(message.connected);
    }
    if (message.joined !== undefined) {
      obj.joined = ServerEvent_Session_JoinedRoom.toJSON(message.joined);
    }
    if (message.leaved !== undefined) {
      obj.leaved = ServerEvent_Session_LeavedRoom.toJSON(message.leaved);
    }
    if (message.disconnected !== undefined) {
      obj.disconnected = ServerEvent_Session_Disconnected.toJSON(message.disconnected);
    }
    if (message.goway !== undefined) {
      obj.goway = ServerEvent_Session_GoAway.toJSON(message.goway);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ServerEvent_Session>, I>>(base?: I): ServerEvent_Session {
    return ServerEvent_Session.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ServerEvent_Session>, I>>(object: I): ServerEvent_Session {
    const message = createBaseServerEvent_Session();
    message.connected = (object.connected !== undefined && object.connected !== null)
      ? ServerEvent_Session_Connected.fromPartial(object.connected)
      : undefined;
    message.joined = (object.joined !== undefined && object.joined !== null)
      ? ServerEvent_Session_JoinedRoom.fromPartial(object.joined)
      : undefined;
    message.leaved = (object.leaved !== undefined && object.leaved !== null)
      ? ServerEvent_Session_LeavedRoom.fromPartial(object.leaved)
      : undefined;
    message.disconnected = (object.disconnected !== undefined && object.disconnected !== null)
      ? ServerEvent_Session_Disconnected.fromPartial(object.disconnected)
      : undefined;
    message.goway = (object.goway !== undefined && object.goway !== null)
      ? ServerEvent_Session_GoAway.fromPartial(object.goway)
      : undefined;
    return message;
  },
};

function createBaseServerEvent_Session_Connected(): ServerEvent_Session_Connected {
  return {};
}

export const ServerEvent_Session_Connected = {
  encode(_: ServerEvent_Session_Connected, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ServerEvent_Session_Connected {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServerEvent_Session_Connected();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ServerEvent_Session_Connected {
    return {};
  },

  toJSON(_: ServerEvent_Session_Connected): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ServerEvent_Session_Connected>, I>>(base?: I): ServerEvent_Session_Connected {
    return ServerEvent_Session_Connected.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ServerEvent_Session_Connected>, I>>(_: I): ServerEvent_Session_Connected {
    const message = createBaseServerEvent_Session_Connected();
    return message;
  },
};

function createBaseServerEvent_Session_JoinedRoom(): ServerEvent_Session_JoinedRoom {
  return { room: "", peer: "" };
}

export const ServerEvent_Session_JoinedRoom = {
  encode(message: ServerEvent_Session_JoinedRoom, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.room !== "") {
      writer.uint32(10).string(message.room);
    }
    if (message.peer !== "") {
      writer.uint32(18).string(message.peer);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ServerEvent_Session_JoinedRoom {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServerEvent_Session_JoinedRoom();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.room = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.peer = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServerEvent_Session_JoinedRoom {
    return {
      room: isSet(object.room) ? globalThis.String(object.room) : "",
      peer: isSet(object.peer) ? globalThis.String(object.peer) : "",
    };
  },

  toJSON(message: ServerEvent_Session_JoinedRoom): unknown {
    const obj: any = {};
    if (message.room !== "") {
      obj.room = message.room;
    }
    if (message.peer !== "") {
      obj.peer = message.peer;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ServerEvent_Session_JoinedRoom>, I>>(base?: I): ServerEvent_Session_JoinedRoom {
    return ServerEvent_Session_JoinedRoom.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ServerEvent_Session_JoinedRoom>, I>>(
    object: I,
  ): ServerEvent_Session_JoinedRoom {
    const message = createBaseServerEvent_Session_JoinedRoom();
    message.room = object.room ?? "";
    message.peer = object.peer ?? "";
    return message;
  },
};

function createBaseServerEvent_Session_LeavedRoom(): ServerEvent_Session_LeavedRoom {
  return { room: "", peer: "" };
}

export const ServerEvent_Session_LeavedRoom = {
  encode(message: ServerEvent_Session_LeavedRoom, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.room !== "") {
      writer.uint32(10).string(message.room);
    }
    if (message.peer !== "") {
      writer.uint32(18).string(message.peer);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ServerEvent_Session_LeavedRoom {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServerEvent_Session_LeavedRoom();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.room = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.peer = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServerEvent_Session_LeavedRoom {
    return {
      room: isSet(object.room) ? globalThis.String(object.room) : "",
      peer: isSet(object.peer) ? globalThis.String(object.peer) : "",
    };
  },

  toJSON(message: ServerEvent_Session_LeavedRoom): unknown {
    const obj: any = {};
    if (message.room !== "") {
      obj.room = message.room;
    }
    if (message.peer !== "") {
      obj.peer = message.peer;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ServerEvent_Session_LeavedRoom>, I>>(base?: I): ServerEvent_Session_LeavedRoom {
    return ServerEvent_Session_LeavedRoom.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ServerEvent_Session_LeavedRoom>, I>>(
    object: I,
  ): ServerEvent_Session_LeavedRoom {
    const message = createBaseServerEvent_Session_LeavedRoom();
    message.room = object.room ?? "";
    message.peer = object.peer ?? "";
    return message;
  },
};

function createBaseServerEvent_Session_Disconnected(): ServerEvent_Session_Disconnected {
  return { reason: "" };
}

export const ServerEvent_Session_Disconnected = {
  encode(message: ServerEvent_Session_Disconnected, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.reason !== "") {
      writer.uint32(10).string(message.reason);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ServerEvent_Session_Disconnected {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServerEvent_Session_Disconnected();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.reason = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServerEvent_Session_Disconnected {
    return { reason: isSet(object.reason) ? globalThis.String(object.reason) : "" };
  },

  toJSON(message: ServerEvent_Session_Disconnected): unknown {
    const obj: any = {};
    if (message.reason !== "") {
      obj.reason = message.reason;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ServerEvent_Session_Disconnected>, I>>(
    base?: I,
  ): ServerEvent_Session_Disconnected {
    return ServerEvent_Session_Disconnected.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ServerEvent_Session_Disconnected>, I>>(
    object: I,
  ): ServerEvent_Session_Disconnected {
    const message = createBaseServerEvent_Session_Disconnected();
    message.reason = object.reason ?? "";
    return message;
  },
};

function createBaseServerEvent_Session_GoAway(): ServerEvent_Session_GoAway {
  return { reason: "", remainSeconds: 0 };
}

export const ServerEvent_Session_GoAway = {
  encode(message: ServerEvent_Session_GoAway, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.reason !== "") {
      writer.uint32(10).string(message.reason);
    }
    if (message.remainSeconds !== 0) {
      writer.uint32(16).uint32(message.remainSeconds);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ServerEvent_Session_GoAway {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServerEvent_Session_GoAway();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.reason = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.remainSeconds = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServerEvent_Session_GoAway {
    return {
      reason: isSet(object.reason) ? globalThis.String(object.reason) : "",
      remainSeconds: isSet(object.remainSeconds) ? globalThis.Number(object.remainSeconds) : 0,
    };
  },

  toJSON(message: ServerEvent_Session_GoAway): unknown {
    const obj: any = {};
    if (message.reason !== "") {
      obj.reason = message.reason;
    }
    if (message.remainSeconds !== 0) {
      obj.remainSeconds = Math.round(message.remainSeconds);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ServerEvent_Session_GoAway>, I>>(base?: I): ServerEvent_Session_GoAway {
    return ServerEvent_Session_GoAway.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ServerEvent_Session_GoAway>, I>>(object: I): ServerEvent_Session_GoAway {
    const message = createBaseServerEvent_Session_GoAway();
    message.reason = object.reason ?? "";
    message.remainSeconds = object.remainSeconds ?? 0;
    return message;
  },
};

function createBaseServerEvent_Room(): ServerEvent_Room {
  return {
    peerJoined: undefined,
    peerUpdated: undefined,
    peerLeaved: undefined,
    trackStarted: undefined,
    trackUpdated: undefined,
    trackStopped: undefined,
  };
}

export const ServerEvent_Room = {
  encode(message: ServerEvent_Room, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.peerJoined !== undefined) {
      ServerEvent_Room_PeerJoined.encode(message.peerJoined, writer.uint32(10).fork()).ldelim();
    }
    if (message.peerUpdated !== undefined) {
      ServerEvent_Room_PeerUpdated.encode(message.peerUpdated, writer.uint32(18).fork()).ldelim();
    }
    if (message.peerLeaved !== undefined) {
      ServerEvent_Room_PeerLeaved.encode(message.peerLeaved, writer.uint32(26).fork()).ldelim();
    }
    if (message.trackStarted !== undefined) {
      ServerEvent_Room_TrackStarted.encode(message.trackStarted, writer.uint32(34).fork()).ldelim();
    }
    if (message.trackUpdated !== undefined) {
      ServerEvent_Room_TrackUpdated.encode(message.trackUpdated, writer.uint32(42).fork()).ldelim();
    }
    if (message.trackStopped !== undefined) {
      ServerEvent_Room_TrackStopped.encode(message.trackStopped, writer.uint32(50).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ServerEvent_Room {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServerEvent_Room();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.peerJoined = ServerEvent_Room_PeerJoined.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.peerUpdated = ServerEvent_Room_PeerUpdated.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.peerLeaved = ServerEvent_Room_PeerLeaved.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.trackStarted = ServerEvent_Room_TrackStarted.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.trackUpdated = ServerEvent_Room_TrackUpdated.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.trackStopped = ServerEvent_Room_TrackStopped.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServerEvent_Room {
    return {
      peerJoined: isSet(object.peerJoined) ? ServerEvent_Room_PeerJoined.fromJSON(object.peerJoined) : undefined,
      peerUpdated: isSet(object.peerUpdated) ? ServerEvent_Room_PeerUpdated.fromJSON(object.peerUpdated) : undefined,
      peerLeaved: isSet(object.peerLeaved) ? ServerEvent_Room_PeerLeaved.fromJSON(object.peerLeaved) : undefined,
      trackStarted: isSet(object.trackStarted)
        ? ServerEvent_Room_TrackStarted.fromJSON(object.trackStarted)
        : undefined,
      trackUpdated: isSet(object.trackUpdated)
        ? ServerEvent_Room_TrackUpdated.fromJSON(object.trackUpdated)
        : undefined,
      trackStopped: isSet(object.trackStopped)
        ? ServerEvent_Room_TrackStopped.fromJSON(object.trackStopped)
        : undefined,
    };
  },

  toJSON(message: ServerEvent_Room): unknown {
    const obj: any = {};
    if (message.peerJoined !== undefined) {
      obj.peerJoined = ServerEvent_Room_PeerJoined.toJSON(message.peerJoined);
    }
    if (message.peerUpdated !== undefined) {
      obj.peerUpdated = ServerEvent_Room_PeerUpdated.toJSON(message.peerUpdated);
    }
    if (message.peerLeaved !== undefined) {
      obj.peerLeaved = ServerEvent_Room_PeerLeaved.toJSON(message.peerLeaved);
    }
    if (message.trackStarted !== undefined) {
      obj.trackStarted = ServerEvent_Room_TrackStarted.toJSON(message.trackStarted);
    }
    if (message.trackUpdated !== undefined) {
      obj.trackUpdated = ServerEvent_Room_TrackUpdated.toJSON(message.trackUpdated);
    }
    if (message.trackStopped !== undefined) {
      obj.trackStopped = ServerEvent_Room_TrackStopped.toJSON(message.trackStopped);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ServerEvent_Room>, I>>(base?: I): ServerEvent_Room {
    return ServerEvent_Room.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ServerEvent_Room>, I>>(object: I): ServerEvent_Room {
    const message = createBaseServerEvent_Room();
    message.peerJoined = (object.peerJoined !== undefined && object.peerJoined !== null)
      ? ServerEvent_Room_PeerJoined.fromPartial(object.peerJoined)
      : undefined;
    message.peerUpdated = (object.peerUpdated !== undefined && object.peerUpdated !== null)
      ? ServerEvent_Room_PeerUpdated.fromPartial(object.peerUpdated)
      : undefined;
    message.peerLeaved = (object.peerLeaved !== undefined && object.peerLeaved !== null)
      ? ServerEvent_Room_PeerLeaved.fromPartial(object.peerLeaved)
      : undefined;
    message.trackStarted = (object.trackStarted !== undefined && object.trackStarted !== null)
      ? ServerEvent_Room_TrackStarted.fromPartial(object.trackStarted)
      : undefined;
    message.trackUpdated = (object.trackUpdated !== undefined && object.trackUpdated !== null)
      ? ServerEvent_Room_TrackUpdated.fromPartial(object.trackUpdated)
      : undefined;
    message.trackStopped = (object.trackStopped !== undefined && object.trackStopped !== null)
      ? ServerEvent_Room_TrackStopped.fromPartial(object.trackStopped)
      : undefined;
    return message;
  },
};

function createBaseServerEvent_Room_PeerJoined(): ServerEvent_Room_PeerJoined {
  return { peer: "", metadata: undefined, extraData: undefined };
}

export const ServerEvent_Room_PeerJoined = {
  encode(message: ServerEvent_Room_PeerJoined, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.peer !== "") {
      writer.uint32(10).string(message.peer);
    }
    if (message.metadata !== undefined) {
      writer.uint32(18).string(message.metadata);
    }
    if (message.extraData !== undefined) {
      writer.uint32(26).string(message.extraData);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ServerEvent_Room_PeerJoined {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServerEvent_Room_PeerJoined();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.peer = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.metadata = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.extraData = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServerEvent_Room_PeerJoined {
    return {
      peer: isSet(object.peer) ? globalThis.String(object.peer) : "",
      metadata: isSet(object.metadata) ? globalThis.String(object.metadata) : undefined,
      extraData: isSet(object.extraData) ? globalThis.String(object.extraData) : undefined,
    };
  },

  toJSON(message: ServerEvent_Room_PeerJoined): unknown {
    const obj: any = {};
    if (message.peer !== "") {
      obj.peer = message.peer;
    }
    if (message.metadata !== undefined) {
      obj.metadata = message.metadata;
    }
    if (message.extraData !== undefined) {
      obj.extraData = message.extraData;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ServerEvent_Room_PeerJoined>, I>>(base?: I): ServerEvent_Room_PeerJoined {
    return ServerEvent_Room_PeerJoined.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ServerEvent_Room_PeerJoined>, I>>(object: I): ServerEvent_Room_PeerJoined {
    const message = createBaseServerEvent_Room_PeerJoined();
    message.peer = object.peer ?? "";
    message.metadata = object.metadata ?? undefined;
    message.extraData = object.extraData ?? undefined;
    return message;
  },
};

function createBaseServerEvent_Room_PeerUpdated(): ServerEvent_Room_PeerUpdated {
  return { peer: "", metadata: undefined };
}

export const ServerEvent_Room_PeerUpdated = {
  encode(message: ServerEvent_Room_PeerUpdated, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.peer !== "") {
      writer.uint32(10).string(message.peer);
    }
    if (message.metadata !== undefined) {
      writer.uint32(18).string(message.metadata);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ServerEvent_Room_PeerUpdated {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServerEvent_Room_PeerUpdated();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.peer = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.metadata = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServerEvent_Room_PeerUpdated {
    return {
      peer: isSet(object.peer) ? globalThis.String(object.peer) : "",
      metadata: isSet(object.metadata) ? globalThis.String(object.metadata) : undefined,
    };
  },

  toJSON(message: ServerEvent_Room_PeerUpdated): unknown {
    const obj: any = {};
    if (message.peer !== "") {
      obj.peer = message.peer;
    }
    if (message.metadata !== undefined) {
      obj.metadata = message.metadata;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ServerEvent_Room_PeerUpdated>, I>>(base?: I): ServerEvent_Room_PeerUpdated {
    return ServerEvent_Room_PeerUpdated.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ServerEvent_Room_PeerUpdated>, I>>(object: I): ServerEvent_Room_PeerUpdated {
    const message = createBaseServerEvent_Room_PeerUpdated();
    message.peer = object.peer ?? "";
    message.metadata = object.metadata ?? undefined;
    return message;
  },
};

function createBaseServerEvent_Room_PeerLeaved(): ServerEvent_Room_PeerLeaved {
  return { peer: "" };
}

export const ServerEvent_Room_PeerLeaved = {
  encode(message: ServerEvent_Room_PeerLeaved, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.peer !== "") {
      writer.uint32(10).string(message.peer);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ServerEvent_Room_PeerLeaved {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServerEvent_Room_PeerLeaved();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.peer = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServerEvent_Room_PeerLeaved {
    return { peer: isSet(object.peer) ? globalThis.String(object.peer) : "" };
  },

  toJSON(message: ServerEvent_Room_PeerLeaved): unknown {
    const obj: any = {};
    if (message.peer !== "") {
      obj.peer = message.peer;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ServerEvent_Room_PeerLeaved>, I>>(base?: I): ServerEvent_Room_PeerLeaved {
    return ServerEvent_Room_PeerLeaved.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ServerEvent_Room_PeerLeaved>, I>>(object: I): ServerEvent_Room_PeerLeaved {
    const message = createBaseServerEvent_Room_PeerLeaved();
    message.peer = object.peer ?? "";
    return message;
  },
};

function createBaseServerEvent_Room_TrackStarted(): ServerEvent_Room_TrackStarted {
  return { peer: "", track: "", kind: 0, metadata: undefined };
}

export const ServerEvent_Room_TrackStarted = {
  encode(message: ServerEvent_Room_TrackStarted, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.peer !== "") {
      writer.uint32(10).string(message.peer);
    }
    if (message.track !== "") {
      writer.uint32(18).string(message.track);
    }
    if (message.kind !== 0) {
      writer.uint32(24).int32(message.kind);
    }
    if (message.metadata !== undefined) {
      writer.uint32(34).string(message.metadata);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ServerEvent_Room_TrackStarted {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServerEvent_Room_TrackStarted();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.peer = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.track = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.kind = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.metadata = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServerEvent_Room_TrackStarted {
    return {
      peer: isSet(object.peer) ? globalThis.String(object.peer) : "",
      track: isSet(object.track) ? globalThis.String(object.track) : "",
      kind: isSet(object.kind) ? kindFromJSON(object.kind) : 0,
      metadata: isSet(object.metadata) ? globalThis.String(object.metadata) : undefined,
    };
  },

  toJSON(message: ServerEvent_Room_TrackStarted): unknown {
    const obj: any = {};
    if (message.peer !== "") {
      obj.peer = message.peer;
    }
    if (message.track !== "") {
      obj.track = message.track;
    }
    if (message.kind !== 0) {
      obj.kind = kindToJSON(message.kind);
    }
    if (message.metadata !== undefined) {
      obj.metadata = message.metadata;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ServerEvent_Room_TrackStarted>, I>>(base?: I): ServerEvent_Room_TrackStarted {
    return ServerEvent_Room_TrackStarted.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ServerEvent_Room_TrackStarted>, I>>(
    object: I,
  ): ServerEvent_Room_TrackStarted {
    const message = createBaseServerEvent_Room_TrackStarted();
    message.peer = object.peer ?? "";
    message.track = object.track ?? "";
    message.kind = object.kind ?? 0;
    message.metadata = object.metadata ?? undefined;
    return message;
  },
};

function createBaseServerEvent_Room_TrackUpdated(): ServerEvent_Room_TrackUpdated {
  return { peer: "", track: "", kind: 0, metadata: undefined };
}

export const ServerEvent_Room_TrackUpdated = {
  encode(message: ServerEvent_Room_TrackUpdated, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.peer !== "") {
      writer.uint32(10).string(message.peer);
    }
    if (message.track !== "") {
      writer.uint32(18).string(message.track);
    }
    if (message.kind !== 0) {
      writer.uint32(24).int32(message.kind);
    }
    if (message.metadata !== undefined) {
      writer.uint32(34).string(message.metadata);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ServerEvent_Room_TrackUpdated {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServerEvent_Room_TrackUpdated();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.peer = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.track = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.kind = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.metadata = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServerEvent_Room_TrackUpdated {
    return {
      peer: isSet(object.peer) ? globalThis.String(object.peer) : "",
      track: isSet(object.track) ? globalThis.String(object.track) : "",
      kind: isSet(object.kind) ? kindFromJSON(object.kind) : 0,
      metadata: isSet(object.metadata) ? globalThis.String(object.metadata) : undefined,
    };
  },

  toJSON(message: ServerEvent_Room_TrackUpdated): unknown {
    const obj: any = {};
    if (message.peer !== "") {
      obj.peer = message.peer;
    }
    if (message.track !== "") {
      obj.track = message.track;
    }
    if (message.kind !== 0) {
      obj.kind = kindToJSON(message.kind);
    }
    if (message.metadata !== undefined) {
      obj.metadata = message.metadata;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ServerEvent_Room_TrackUpdated>, I>>(base?: I): ServerEvent_Room_TrackUpdated {
    return ServerEvent_Room_TrackUpdated.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ServerEvent_Room_TrackUpdated>, I>>(
    object: I,
  ): ServerEvent_Room_TrackUpdated {
    const message = createBaseServerEvent_Room_TrackUpdated();
    message.peer = object.peer ?? "";
    message.track = object.track ?? "";
    message.kind = object.kind ?? 0;
    message.metadata = object.metadata ?? undefined;
    return message;
  },
};

function createBaseServerEvent_Room_TrackStopped(): ServerEvent_Room_TrackStopped {
  return { peer: "", track: "", kind: 0 };
}

export const ServerEvent_Room_TrackStopped = {
  encode(message: ServerEvent_Room_TrackStopped, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.peer !== "") {
      writer.uint32(10).string(message.peer);
    }
    if (message.track !== "") {
      writer.uint32(18).string(message.track);
    }
    if (message.kind !== 0) {
      writer.uint32(24).int32(message.kind);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ServerEvent_Room_TrackStopped {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServerEvent_Room_TrackStopped();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.peer = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.track = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.kind = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServerEvent_Room_TrackStopped {
    return {
      peer: isSet(object.peer) ? globalThis.String(object.peer) : "",
      track: isSet(object.track) ? globalThis.String(object.track) : "",
      kind: isSet(object.kind) ? kindFromJSON(object.kind) : 0,
    };
  },

  toJSON(message: ServerEvent_Room_TrackStopped): unknown {
    const obj: any = {};
    if (message.peer !== "") {
      obj.peer = message.peer;
    }
    if (message.track !== "") {
      obj.track = message.track;
    }
    if (message.kind !== 0) {
      obj.kind = kindToJSON(message.kind);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ServerEvent_Room_TrackStopped>, I>>(base?: I): ServerEvent_Room_TrackStopped {
    return ServerEvent_Room_TrackStopped.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ServerEvent_Room_TrackStopped>, I>>(
    object: I,
  ): ServerEvent_Room_TrackStopped {
    const message = createBaseServerEvent_Room_TrackStopped();
    message.peer = object.peer ?? "";
    message.track = object.track ?? "";
    message.kind = object.kind ?? 0;
    return message;
  },
};

function createBaseServerEvent_Sender(): ServerEvent_Sender {
  return { name: "", state: undefined };
}

export const ServerEvent_Sender = {
  encode(message: ServerEvent_Sender, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.state !== undefined) {
      ServerEvent_Sender_State.encode(message.state, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ServerEvent_Sender {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServerEvent_Sender();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.state = ServerEvent_Sender_State.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServerEvent_Sender {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      state: isSet(object.state) ? ServerEvent_Sender_State.fromJSON(object.state) : undefined,
    };
  },

  toJSON(message: ServerEvent_Sender): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.state !== undefined) {
      obj.state = ServerEvent_Sender_State.toJSON(message.state);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ServerEvent_Sender>, I>>(base?: I): ServerEvent_Sender {
    return ServerEvent_Sender.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ServerEvent_Sender>, I>>(object: I): ServerEvent_Sender {
    const message = createBaseServerEvent_Sender();
    message.name = object.name ?? "";
    message.state = (object.state !== undefined && object.state !== null)
      ? ServerEvent_Sender_State.fromPartial(object.state)
      : undefined;
    return message;
  },
};

function createBaseServerEvent_Sender_State(): ServerEvent_Sender_State {
  return { status: 0 };
}

export const ServerEvent_Sender_State = {
  encode(message: ServerEvent_Sender_State, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.status !== 0) {
      writer.uint32(8).int32(message.status);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ServerEvent_Sender_State {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServerEvent_Sender_State();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServerEvent_Sender_State {
    return { status: isSet(object.status) ? sender_StatusFromJSON(object.status) : 0 };
  },

  toJSON(message: ServerEvent_Sender_State): unknown {
    const obj: any = {};
    if (message.status !== 0) {
      obj.status = sender_StatusToJSON(message.status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ServerEvent_Sender_State>, I>>(base?: I): ServerEvent_Sender_State {
    return ServerEvent_Sender_State.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ServerEvent_Sender_State>, I>>(object: I): ServerEvent_Sender_State {
    const message = createBaseServerEvent_Sender_State();
    message.status = object.status ?? 0;
    return message;
  },
};

function createBaseServerEvent_Receiver(): ServerEvent_Receiver {
  return { name: "", state: undefined, stats: undefined, voiceActivity: undefined };
}

export const ServerEvent_Receiver = {
  encode(message: ServerEvent_Receiver, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.state !== undefined) {
      ServerEvent_Receiver_State.encode(message.state, writer.uint32(18).fork()).ldelim();
    }
    if (message.stats !== undefined) {
      ServerEvent_Receiver_Stats.encode(message.stats, writer.uint32(26).fork()).ldelim();
    }
    if (message.voiceActivity !== undefined) {
      ServerEvent_Receiver_VoiceActivity.encode(message.voiceActivity, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ServerEvent_Receiver {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServerEvent_Receiver();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.state = ServerEvent_Receiver_State.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.stats = ServerEvent_Receiver_Stats.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.voiceActivity = ServerEvent_Receiver_VoiceActivity.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServerEvent_Receiver {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      state: isSet(object.state) ? ServerEvent_Receiver_State.fromJSON(object.state) : undefined,
      stats: isSet(object.stats) ? ServerEvent_Receiver_Stats.fromJSON(object.stats) : undefined,
      voiceActivity: isSet(object.voiceActivity)
        ? ServerEvent_Receiver_VoiceActivity.fromJSON(object.voiceActivity)
        : undefined,
    };
  },

  toJSON(message: ServerEvent_Receiver): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.state !== undefined) {
      obj.state = ServerEvent_Receiver_State.toJSON(message.state);
    }
    if (message.stats !== undefined) {
      obj.stats = ServerEvent_Receiver_Stats.toJSON(message.stats);
    }
    if (message.voiceActivity !== undefined) {
      obj.voiceActivity = ServerEvent_Receiver_VoiceActivity.toJSON(message.voiceActivity);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ServerEvent_Receiver>, I>>(base?: I): ServerEvent_Receiver {
    return ServerEvent_Receiver.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ServerEvent_Receiver>, I>>(object: I): ServerEvent_Receiver {
    const message = createBaseServerEvent_Receiver();
    message.name = object.name ?? "";
    message.state = (object.state !== undefined && object.state !== null)
      ? ServerEvent_Receiver_State.fromPartial(object.state)
      : undefined;
    message.stats = (object.stats !== undefined && object.stats !== null)
      ? ServerEvent_Receiver_Stats.fromPartial(object.stats)
      : undefined;
    message.voiceActivity = (object.voiceActivity !== undefined && object.voiceActivity !== null)
      ? ServerEvent_Receiver_VoiceActivity.fromPartial(object.voiceActivity)
      : undefined;
    return message;
  },
};

function createBaseServerEvent_Receiver_State(): ServerEvent_Receiver_State {
  return { status: 0 };
}

export const ServerEvent_Receiver_State = {
  encode(message: ServerEvent_Receiver_State, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.status !== 0) {
      writer.uint32(8).int32(message.status);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ServerEvent_Receiver_State {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServerEvent_Receiver_State();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServerEvent_Receiver_State {
    return { status: isSet(object.status) ? receiver_StatusFromJSON(object.status) : 0 };
  },

  toJSON(message: ServerEvent_Receiver_State): unknown {
    const obj: any = {};
    if (message.status !== 0) {
      obj.status = receiver_StatusToJSON(message.status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ServerEvent_Receiver_State>, I>>(base?: I): ServerEvent_Receiver_State {
    return ServerEvent_Receiver_State.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ServerEvent_Receiver_State>, I>>(object: I): ServerEvent_Receiver_State {
    const message = createBaseServerEvent_Receiver_State();
    message.status = object.status ?? 0;
    return message;
  },
};

function createBaseServerEvent_Receiver_Stats(): ServerEvent_Receiver_Stats {
  return { source: undefined, transmit: undefined };
}

export const ServerEvent_Receiver_Stats = {
  encode(message: ServerEvent_Receiver_Stats, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.source !== undefined) {
      ServerEvent_Receiver_Stats_Source.encode(message.source, writer.uint32(10).fork()).ldelim();
    }
    if (message.transmit !== undefined) {
      ServerEvent_Receiver_Stats_Transmit.encode(message.transmit, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ServerEvent_Receiver_Stats {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServerEvent_Receiver_Stats();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.source = ServerEvent_Receiver_Stats_Source.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.transmit = ServerEvent_Receiver_Stats_Transmit.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServerEvent_Receiver_Stats {
    return {
      source: isSet(object.source) ? ServerEvent_Receiver_Stats_Source.fromJSON(object.source) : undefined,
      transmit: isSet(object.transmit) ? ServerEvent_Receiver_Stats_Transmit.fromJSON(object.transmit) : undefined,
    };
  },

  toJSON(message: ServerEvent_Receiver_Stats): unknown {
    const obj: any = {};
    if (message.source !== undefined) {
      obj.source = ServerEvent_Receiver_Stats_Source.toJSON(message.source);
    }
    if (message.transmit !== undefined) {
      obj.transmit = ServerEvent_Receiver_Stats_Transmit.toJSON(message.transmit);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ServerEvent_Receiver_Stats>, I>>(base?: I): ServerEvent_Receiver_Stats {
    return ServerEvent_Receiver_Stats.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ServerEvent_Receiver_Stats>, I>>(object: I): ServerEvent_Receiver_Stats {
    const message = createBaseServerEvent_Receiver_Stats();
    message.source = (object.source !== undefined && object.source !== null)
      ? ServerEvent_Receiver_Stats_Source.fromPartial(object.source)
      : undefined;
    message.transmit = (object.transmit !== undefined && object.transmit !== null)
      ? ServerEvent_Receiver_Stats_Transmit.fromPartial(object.transmit)
      : undefined;
    return message;
  },
};

function createBaseServerEvent_Receiver_Stats_Source(): ServerEvent_Receiver_Stats_Source {
  return { bitrateKbps: 0, rtt: 0, lost: 0, jitter: 0 };
}

export const ServerEvent_Receiver_Stats_Source = {
  encode(message: ServerEvent_Receiver_Stats_Source, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.bitrateKbps !== 0) {
      writer.uint32(8).uint32(message.bitrateKbps);
    }
    if (message.rtt !== 0) {
      writer.uint32(21).float(message.rtt);
    }
    if (message.lost !== 0) {
      writer.uint32(29).float(message.lost);
    }
    if (message.jitter !== 0) {
      writer.uint32(37).float(message.jitter);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ServerEvent_Receiver_Stats_Source {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServerEvent_Receiver_Stats_Source();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.bitrateKbps = reader.uint32();
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }

          message.rtt = reader.float();
          continue;
        case 3:
          if (tag !== 29) {
            break;
          }

          message.lost = reader.float();
          continue;
        case 4:
          if (tag !== 37) {
            break;
          }

          message.jitter = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServerEvent_Receiver_Stats_Source {
    return {
      bitrateKbps: isSet(object.bitrateKbps) ? globalThis.Number(object.bitrateKbps) : 0,
      rtt: isSet(object.rtt) ? globalThis.Number(object.rtt) : 0,
      lost: isSet(object.lost) ? globalThis.Number(object.lost) : 0,
      jitter: isSet(object.jitter) ? globalThis.Number(object.jitter) : 0,
    };
  },

  toJSON(message: ServerEvent_Receiver_Stats_Source): unknown {
    const obj: any = {};
    if (message.bitrateKbps !== 0) {
      obj.bitrateKbps = Math.round(message.bitrateKbps);
    }
    if (message.rtt !== 0) {
      obj.rtt = message.rtt;
    }
    if (message.lost !== 0) {
      obj.lost = message.lost;
    }
    if (message.jitter !== 0) {
      obj.jitter = message.jitter;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ServerEvent_Receiver_Stats_Source>, I>>(
    base?: I,
  ): ServerEvent_Receiver_Stats_Source {
    return ServerEvent_Receiver_Stats_Source.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ServerEvent_Receiver_Stats_Source>, I>>(
    object: I,
  ): ServerEvent_Receiver_Stats_Source {
    const message = createBaseServerEvent_Receiver_Stats_Source();
    message.bitrateKbps = object.bitrateKbps ?? 0;
    message.rtt = object.rtt ?? 0;
    message.lost = object.lost ?? 0;
    message.jitter = object.jitter ?? 0;
    return message;
  },
};

function createBaseServerEvent_Receiver_Stats_Transmit(): ServerEvent_Receiver_Stats_Transmit {
  return { spatial: 0, temporal: 0, bitrateKbps: 0 };
}

export const ServerEvent_Receiver_Stats_Transmit = {
  encode(message: ServerEvent_Receiver_Stats_Transmit, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.spatial !== 0) {
      writer.uint32(8).uint32(message.spatial);
    }
    if (message.temporal !== 0) {
      writer.uint32(16).uint32(message.temporal);
    }
    if (message.bitrateKbps !== 0) {
      writer.uint32(24).uint32(message.bitrateKbps);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ServerEvent_Receiver_Stats_Transmit {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServerEvent_Receiver_Stats_Transmit();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.spatial = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.temporal = reader.uint32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.bitrateKbps = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServerEvent_Receiver_Stats_Transmit {
    return {
      spatial: isSet(object.spatial) ? globalThis.Number(object.spatial) : 0,
      temporal: isSet(object.temporal) ? globalThis.Number(object.temporal) : 0,
      bitrateKbps: isSet(object.bitrateKbps) ? globalThis.Number(object.bitrateKbps) : 0,
    };
  },

  toJSON(message: ServerEvent_Receiver_Stats_Transmit): unknown {
    const obj: any = {};
    if (message.spatial !== 0) {
      obj.spatial = Math.round(message.spatial);
    }
    if (message.temporal !== 0) {
      obj.temporal = Math.round(message.temporal);
    }
    if (message.bitrateKbps !== 0) {
      obj.bitrateKbps = Math.round(message.bitrateKbps);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ServerEvent_Receiver_Stats_Transmit>, I>>(
    base?: I,
  ): ServerEvent_Receiver_Stats_Transmit {
    return ServerEvent_Receiver_Stats_Transmit.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ServerEvent_Receiver_Stats_Transmit>, I>>(
    object: I,
  ): ServerEvent_Receiver_Stats_Transmit {
    const message = createBaseServerEvent_Receiver_Stats_Transmit();
    message.spatial = object.spatial ?? 0;
    message.temporal = object.temporal ?? 0;
    message.bitrateKbps = object.bitrateKbps ?? 0;
    return message;
  },
};

function createBaseServerEvent_Receiver_VoiceActivity(): ServerEvent_Receiver_VoiceActivity {
  return { audioLevel: 0 };
}

export const ServerEvent_Receiver_VoiceActivity = {
  encode(message: ServerEvent_Receiver_VoiceActivity, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.audioLevel !== 0) {
      writer.uint32(8).int32(message.audioLevel);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ServerEvent_Receiver_VoiceActivity {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServerEvent_Receiver_VoiceActivity();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.audioLevel = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServerEvent_Receiver_VoiceActivity {
    return { audioLevel: isSet(object.audioLevel) ? globalThis.Number(object.audioLevel) : 0 };
  },

  toJSON(message: ServerEvent_Receiver_VoiceActivity): unknown {
    const obj: any = {};
    if (message.audioLevel !== 0) {
      obj.audioLevel = Math.round(message.audioLevel);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ServerEvent_Receiver_VoiceActivity>, I>>(
    base?: I,
  ): ServerEvent_Receiver_VoiceActivity {
    return ServerEvent_Receiver_VoiceActivity.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ServerEvent_Receiver_VoiceActivity>, I>>(
    object: I,
  ): ServerEvent_Receiver_VoiceActivity {
    const message = createBaseServerEvent_Receiver_VoiceActivity();
    message.audioLevel = object.audioLevel ?? 0;
    return message;
  },
};

function createBaseClientEvent(): ClientEvent {
  return { seq: 0, request: undefined };
}

export const ClientEvent = {
  encode(message: ClientEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.seq !== 0) {
      writer.uint32(8).uint32(message.seq);
    }
    if (message.request !== undefined) {
      Request.encode(message.request, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ClientEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClientEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.seq = reader.uint32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.request = Request.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClientEvent {
    return {
      seq: isSet(object.seq) ? globalThis.Number(object.seq) : 0,
      request: isSet(object.request) ? Request.fromJSON(object.request) : undefined,
    };
  },

  toJSON(message: ClientEvent): unknown {
    const obj: any = {};
    if (message.seq !== 0) {
      obj.seq = Math.round(message.seq);
    }
    if (message.request !== undefined) {
      obj.request = Request.toJSON(message.request);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClientEvent>, I>>(base?: I): ClientEvent {
    return ClientEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClientEvent>, I>>(object: I): ClientEvent {
    const message = createBaseClientEvent();
    message.seq = object.seq ?? 0;
    message.request = (object.request !== undefined && object.request !== null)
      ? Request.fromPartial(object.request)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
