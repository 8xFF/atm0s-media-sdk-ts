// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.174.0
//   protoc               v4.25.1
// source: gateway.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";
import { RoomJoin } from "./session";
import { Tracks } from "./shared";

export const protobufPackage = "gateway";

export interface ConnectRequest {
  version: string;
  join?: RoomJoin | undefined;
  tracks: Tracks | undefined;
  sdp: string;
}

export interface ConnectResponse {
  connId: string;
  sdp: string;
  iceLite: boolean;
}

export interface RemoteIceRequest {
  candidates: string[];
}

export interface RemoteIceResponse {
  added: number;
}

function createBaseConnectRequest(): ConnectRequest {
  return { version: "", join: undefined, tracks: undefined, sdp: "" };
}

export const ConnectRequest = {
  encode(message: ConnectRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.version !== "") {
      writer.uint32(18).string(message.version);
    }
    if (message.join !== undefined) {
      RoomJoin.encode(message.join, writer.uint32(26).fork()).ldelim();
    }
    if (message.tracks !== undefined) {
      Tracks.encode(message.tracks, writer.uint32(34).fork()).ldelim();
    }
    if (message.sdp !== "") {
      writer.uint32(42).string(message.sdp);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ConnectRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConnectRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.version = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.join = RoomJoin.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.tracks = Tracks.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.sdp = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConnectRequest {
    return {
      version: isSet(object.version) ? globalThis.String(object.version) : "",
      join: isSet(object.join) ? RoomJoin.fromJSON(object.join) : undefined,
      tracks: isSet(object.tracks) ? Tracks.fromJSON(object.tracks) : undefined,
      sdp: isSet(object.sdp) ? globalThis.String(object.sdp) : "",
    };
  },

  toJSON(message: ConnectRequest): unknown {
    const obj: any = {};
    if (message.version !== "") {
      obj.version = message.version;
    }
    if (message.join !== undefined) {
      obj.join = RoomJoin.toJSON(message.join);
    }
    if (message.tracks !== undefined) {
      obj.tracks = Tracks.toJSON(message.tracks);
    }
    if (message.sdp !== "") {
      obj.sdp = message.sdp;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConnectRequest>, I>>(base?: I): ConnectRequest {
    return ConnectRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConnectRequest>, I>>(object: I): ConnectRequest {
    const message = createBaseConnectRequest();
    message.version = object.version ?? "";
    message.join = (object.join !== undefined && object.join !== null) ? RoomJoin.fromPartial(object.join) : undefined;
    message.tracks = (object.tracks !== undefined && object.tracks !== null)
      ? Tracks.fromPartial(object.tracks)
      : undefined;
    message.sdp = object.sdp ?? "";
    return message;
  },
};

function createBaseConnectResponse(): ConnectResponse {
  return { connId: "", sdp: "", iceLite: false };
}

export const ConnectResponse = {
  encode(message: ConnectResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.connId !== "") {
      writer.uint32(10).string(message.connId);
    }
    if (message.sdp !== "") {
      writer.uint32(18).string(message.sdp);
    }
    if (message.iceLite !== false) {
      writer.uint32(24).bool(message.iceLite);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ConnectResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConnectResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.connId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.sdp = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.iceLite = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConnectResponse {
    return {
      connId: isSet(object.connId) ? globalThis.String(object.connId) : "",
      sdp: isSet(object.sdp) ? globalThis.String(object.sdp) : "",
      iceLite: isSet(object.iceLite) ? globalThis.Boolean(object.iceLite) : false,
    };
  },

  toJSON(message: ConnectResponse): unknown {
    const obj: any = {};
    if (message.connId !== "") {
      obj.connId = message.connId;
    }
    if (message.sdp !== "") {
      obj.sdp = message.sdp;
    }
    if (message.iceLite !== false) {
      obj.iceLite = message.iceLite;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConnectResponse>, I>>(base?: I): ConnectResponse {
    return ConnectResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConnectResponse>, I>>(object: I): ConnectResponse {
    const message = createBaseConnectResponse();
    message.connId = object.connId ?? "";
    message.sdp = object.sdp ?? "";
    message.iceLite = object.iceLite ?? false;
    return message;
  },
};

function createBaseRemoteIceRequest(): RemoteIceRequest {
  return { candidates: [] };
}

export const RemoteIceRequest = {
  encode(message: RemoteIceRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.candidates) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoteIceRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoteIceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.candidates.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoteIceRequest {
    return {
      candidates: globalThis.Array.isArray(object?.candidates)
        ? object.candidates.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: RemoteIceRequest): unknown {
    const obj: any = {};
    if (message.candidates?.length) {
      obj.candidates = message.candidates;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoteIceRequest>, I>>(base?: I): RemoteIceRequest {
    return RemoteIceRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoteIceRequest>, I>>(object: I): RemoteIceRequest {
    const message = createBaseRemoteIceRequest();
    message.candidates = object.candidates?.map((e) => e) || [];
    return message;
  },
};

function createBaseRemoteIceResponse(): RemoteIceResponse {
  return { added: 0 };
}

export const RemoteIceResponse = {
  encode(message: RemoteIceResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.added !== 0) {
      writer.uint32(8).uint32(message.added);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoteIceResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoteIceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.added = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoteIceResponse {
    return { added: isSet(object.added) ? globalThis.Number(object.added) : 0 };
  },

  toJSON(message: RemoteIceResponse): unknown {
    const obj: any = {};
    if (message.added !== 0) {
      obj.added = Math.round(message.added);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoteIceResponse>, I>>(base?: I): RemoteIceResponse {
    return RemoteIceResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoteIceResponse>, I>>(object: I): RemoteIceResponse {
    const message = createBaseRemoteIceResponse();
    message.added = object.added ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
