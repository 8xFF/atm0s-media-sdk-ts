// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.174.0
//   protoc               v4.25.1
// source: features.mixer.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";
import { Receiver_Source } from "./shared";

export const protobufPackage = "features.mixer";

export enum Mode {
  AUTO = 0,
  MANUAL = 1,
  UNRECOGNIZED = -1,
}

export function modeFromJSON(object: any): Mode {
  switch (object) {
    case 0:
    case "AUTO":
      return Mode.AUTO;
    case 1:
    case "MANUAL":
      return Mode.MANUAL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Mode.UNRECOGNIZED;
  }
}

export function modeToJSON(object: Mode): string {
  switch (object) {
    case Mode.AUTO:
      return "AUTO";
    case Mode.MANUAL:
      return "MANUAL";
    case Mode.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Config {
  mode: Mode;
  outputs: string[];
  sources: Receiver_Source[];
}

export interface Request {
  attach?: Request_Attach | undefined;
  detach?: Request_Detach | undefined;
}

export interface Request_Attach {
  sources: Receiver_Source[];
}

export interface Request_Detach {
  sources: Receiver_Source[];
}

export interface Response {
  attach?: Response_Attach | undefined;
  detach?: Response_Detach | undefined;
}

export interface Response_Attach {
}

export interface Response_Detach {
}

export interface ServerEvent {
  slotSet?: ServerEvent_SlotSet | undefined;
  slotUnset?: ServerEvent_SlotUnset | undefined;
}

export interface ServerEvent_SlotSet {
  slot: number;
  source: Receiver_Source | undefined;
}

export interface ServerEvent_SlotUnset {
  slot: number;
}

function createBaseConfig(): Config {
  return { mode: 0, outputs: [], sources: [] };
}

export const Config = {
  encode(message: Config, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.mode !== 0) {
      writer.uint32(8).int32(message.mode);
    }
    for (const v of message.outputs) {
      writer.uint32(18).string(v!);
    }
    for (const v of message.sources) {
      Receiver_Source.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Config {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.mode = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.outputs.push(reader.string());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.sources.push(Receiver_Source.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Config {
    return {
      mode: isSet(object.mode) ? modeFromJSON(object.mode) : 0,
      outputs: globalThis.Array.isArray(object?.outputs) ? object.outputs.map((e: any) => globalThis.String(e)) : [],
      sources: globalThis.Array.isArray(object?.sources)
        ? object.sources.map((e: any) => Receiver_Source.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Config): unknown {
    const obj: any = {};
    if (message.mode !== 0) {
      obj.mode = modeToJSON(message.mode);
    }
    if (message.outputs?.length) {
      obj.outputs = message.outputs;
    }
    if (message.sources?.length) {
      obj.sources = message.sources.map((e) => Receiver_Source.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Config>, I>>(base?: I): Config {
    return Config.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Config>, I>>(object: I): Config {
    const message = createBaseConfig();
    message.mode = object.mode ?? 0;
    message.outputs = object.outputs?.map((e) => e) || [];
    message.sources = object.sources?.map((e) => Receiver_Source.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRequest(): Request {
  return { attach: undefined, detach: undefined };
}

export const Request = {
  encode(message: Request, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.attach !== undefined) {
      Request_Attach.encode(message.attach, writer.uint32(10).fork()).ldelim();
    }
    if (message.detach !== undefined) {
      Request_Detach.encode(message.detach, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Request {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.attach = Request_Attach.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.detach = Request_Detach.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Request {
    return {
      attach: isSet(object.attach) ? Request_Attach.fromJSON(object.attach) : undefined,
      detach: isSet(object.detach) ? Request_Detach.fromJSON(object.detach) : undefined,
    };
  },

  toJSON(message: Request): unknown {
    const obj: any = {};
    if (message.attach !== undefined) {
      obj.attach = Request_Attach.toJSON(message.attach);
    }
    if (message.detach !== undefined) {
      obj.detach = Request_Detach.toJSON(message.detach);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Request>, I>>(base?: I): Request {
    return Request.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Request>, I>>(object: I): Request {
    const message = createBaseRequest();
    message.attach = (object.attach !== undefined && object.attach !== null)
      ? Request_Attach.fromPartial(object.attach)
      : undefined;
    message.detach = (object.detach !== undefined && object.detach !== null)
      ? Request_Detach.fromPartial(object.detach)
      : undefined;
    return message;
  },
};

function createBaseRequest_Attach(): Request_Attach {
  return { sources: [] };
}

export const Request_Attach = {
  encode(message: Request_Attach, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.sources) {
      Receiver_Source.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Request_Attach {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequest_Attach();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sources.push(Receiver_Source.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Request_Attach {
    return {
      sources: globalThis.Array.isArray(object?.sources)
        ? object.sources.map((e: any) => Receiver_Source.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Request_Attach): unknown {
    const obj: any = {};
    if (message.sources?.length) {
      obj.sources = message.sources.map((e) => Receiver_Source.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Request_Attach>, I>>(base?: I): Request_Attach {
    return Request_Attach.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Request_Attach>, I>>(object: I): Request_Attach {
    const message = createBaseRequest_Attach();
    message.sources = object.sources?.map((e) => Receiver_Source.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRequest_Detach(): Request_Detach {
  return { sources: [] };
}

export const Request_Detach = {
  encode(message: Request_Detach, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.sources) {
      Receiver_Source.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Request_Detach {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequest_Detach();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sources.push(Receiver_Source.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Request_Detach {
    return {
      sources: globalThis.Array.isArray(object?.sources)
        ? object.sources.map((e: any) => Receiver_Source.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Request_Detach): unknown {
    const obj: any = {};
    if (message.sources?.length) {
      obj.sources = message.sources.map((e) => Receiver_Source.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Request_Detach>, I>>(base?: I): Request_Detach {
    return Request_Detach.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Request_Detach>, I>>(object: I): Request_Detach {
    const message = createBaseRequest_Detach();
    message.sources = object.sources?.map((e) => Receiver_Source.fromPartial(e)) || [];
    return message;
  },
};

function createBaseResponse(): Response {
  return { attach: undefined, detach: undefined };
}

export const Response = {
  encode(message: Response, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.attach !== undefined) {
      Response_Attach.encode(message.attach, writer.uint32(10).fork()).ldelim();
    }
    if (message.detach !== undefined) {
      Response_Detach.encode(message.detach, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Response {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.attach = Response_Attach.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.detach = Response_Detach.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Response {
    return {
      attach: isSet(object.attach) ? Response_Attach.fromJSON(object.attach) : undefined,
      detach: isSet(object.detach) ? Response_Detach.fromJSON(object.detach) : undefined,
    };
  },

  toJSON(message: Response): unknown {
    const obj: any = {};
    if (message.attach !== undefined) {
      obj.attach = Response_Attach.toJSON(message.attach);
    }
    if (message.detach !== undefined) {
      obj.detach = Response_Detach.toJSON(message.detach);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Response>, I>>(base?: I): Response {
    return Response.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Response>, I>>(object: I): Response {
    const message = createBaseResponse();
    message.attach = (object.attach !== undefined && object.attach !== null)
      ? Response_Attach.fromPartial(object.attach)
      : undefined;
    message.detach = (object.detach !== undefined && object.detach !== null)
      ? Response_Detach.fromPartial(object.detach)
      : undefined;
    return message;
  },
};

function createBaseResponse_Attach(): Response_Attach {
  return {};
}

export const Response_Attach = {
  encode(_: Response_Attach, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Response_Attach {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponse_Attach();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Response_Attach {
    return {};
  },

  toJSON(_: Response_Attach): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Response_Attach>, I>>(base?: I): Response_Attach {
    return Response_Attach.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Response_Attach>, I>>(_: I): Response_Attach {
    const message = createBaseResponse_Attach();
    return message;
  },
};

function createBaseResponse_Detach(): Response_Detach {
  return {};
}

export const Response_Detach = {
  encode(_: Response_Detach, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Response_Detach {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponse_Detach();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Response_Detach {
    return {};
  },

  toJSON(_: Response_Detach): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Response_Detach>, I>>(base?: I): Response_Detach {
    return Response_Detach.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Response_Detach>, I>>(_: I): Response_Detach {
    const message = createBaseResponse_Detach();
    return message;
  },
};

function createBaseServerEvent(): ServerEvent {
  return { slotSet: undefined, slotUnset: undefined };
}

export const ServerEvent = {
  encode(message: ServerEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.slotSet !== undefined) {
      ServerEvent_SlotSet.encode(message.slotSet, writer.uint32(10).fork()).ldelim();
    }
    if (message.slotUnset !== undefined) {
      ServerEvent_SlotUnset.encode(message.slotUnset, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ServerEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServerEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.slotSet = ServerEvent_SlotSet.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.slotUnset = ServerEvent_SlotUnset.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServerEvent {
    return {
      slotSet: isSet(object.slotSet) ? ServerEvent_SlotSet.fromJSON(object.slotSet) : undefined,
      slotUnset: isSet(object.slotUnset) ? ServerEvent_SlotUnset.fromJSON(object.slotUnset) : undefined,
    };
  },

  toJSON(message: ServerEvent): unknown {
    const obj: any = {};
    if (message.slotSet !== undefined) {
      obj.slotSet = ServerEvent_SlotSet.toJSON(message.slotSet);
    }
    if (message.slotUnset !== undefined) {
      obj.slotUnset = ServerEvent_SlotUnset.toJSON(message.slotUnset);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ServerEvent>, I>>(base?: I): ServerEvent {
    return ServerEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ServerEvent>, I>>(object: I): ServerEvent {
    const message = createBaseServerEvent();
    message.slotSet = (object.slotSet !== undefined && object.slotSet !== null)
      ? ServerEvent_SlotSet.fromPartial(object.slotSet)
      : undefined;
    message.slotUnset = (object.slotUnset !== undefined && object.slotUnset !== null)
      ? ServerEvent_SlotUnset.fromPartial(object.slotUnset)
      : undefined;
    return message;
  },
};

function createBaseServerEvent_SlotSet(): ServerEvent_SlotSet {
  return { slot: 0, source: undefined };
}

export const ServerEvent_SlotSet = {
  encode(message: ServerEvent_SlotSet, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.slot !== 0) {
      writer.uint32(8).uint32(message.slot);
    }
    if (message.source !== undefined) {
      Receiver_Source.encode(message.source, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ServerEvent_SlotSet {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServerEvent_SlotSet();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.slot = reader.uint32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.source = Receiver_Source.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServerEvent_SlotSet {
    return {
      slot: isSet(object.slot) ? globalThis.Number(object.slot) : 0,
      source: isSet(object.source) ? Receiver_Source.fromJSON(object.source) : undefined,
    };
  },

  toJSON(message: ServerEvent_SlotSet): unknown {
    const obj: any = {};
    if (message.slot !== 0) {
      obj.slot = Math.round(message.slot);
    }
    if (message.source !== undefined) {
      obj.source = Receiver_Source.toJSON(message.source);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ServerEvent_SlotSet>, I>>(base?: I): ServerEvent_SlotSet {
    return ServerEvent_SlotSet.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ServerEvent_SlotSet>, I>>(object: I): ServerEvent_SlotSet {
    const message = createBaseServerEvent_SlotSet();
    message.slot = object.slot ?? 0;
    message.source = (object.source !== undefined && object.source !== null)
      ? Receiver_Source.fromPartial(object.source)
      : undefined;
    return message;
  },
};

function createBaseServerEvent_SlotUnset(): ServerEvent_SlotUnset {
  return { slot: 0 };
}

export const ServerEvent_SlotUnset = {
  encode(message: ServerEvent_SlotUnset, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.slot !== 0) {
      writer.uint32(8).uint32(message.slot);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ServerEvent_SlotUnset {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServerEvent_SlotUnset();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.slot = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServerEvent_SlotUnset {
    return { slot: isSet(object.slot) ? globalThis.Number(object.slot) : 0 };
  },

  toJSON(message: ServerEvent_SlotUnset): unknown {
    const obj: any = {};
    if (message.slot !== 0) {
      obj.slot = Math.round(message.slot);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ServerEvent_SlotUnset>, I>>(base?: I): ServerEvent_SlotUnset {
    return ServerEvent_SlotUnset.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ServerEvent_SlotUnset>, I>>(object: I): ServerEvent_SlotUnset {
    const message = createBaseServerEvent_SlotUnset();
    message.slot = object.slot ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
