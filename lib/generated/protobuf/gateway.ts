// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.174.0
//   protoc               v4.25.1
// source: gateway.proto

/* eslint-disable */
import { grpc } from "@improbable-eng/grpc-web";
import { BrowserHeaders } from "browser-headers";
import * as _m0 from "protobufjs/minimal";
import { Features } from "./features";
import { BitrateControlMode, bitrateControlModeFromJSON, bitrateControlModeToJSON, RoomInfo, Tracks } from "./shared";

export const protobufPackage = "gateway";

export interface ConnectRequest {
  token: string;
  version: string;
  room?: string | undefined;
  peer?: string | undefined;
  metadata?: string | undefined;
  info: RoomInfo | undefined;
  bitrate: BitrateControlMode;
  features: Features | undefined;
  tracks: Tracks | undefined;
  sdp: string;
}

export interface ConnectResponse {
  connId: string;
  sdp: string;
}

export interface RemoteIceRequest {
  connId: string;
  candidate: string;
}

export interface RemoteIceRespone {
  candidates: string[];
}

function createBaseConnectRequest(): ConnectRequest {
  return {
    token: "",
    version: "",
    room: undefined,
    peer: undefined,
    metadata: undefined,
    info: undefined,
    bitrate: 0,
    features: undefined,
    tracks: undefined,
    sdp: "",
  };
}

export const ConnectRequest = {
  encode(message: ConnectRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.token !== "") {
      writer.uint32(10).string(message.token);
    }
    if (message.version !== "") {
      writer.uint32(18).string(message.version);
    }
    if (message.room !== undefined) {
      writer.uint32(26).string(message.room);
    }
    if (message.peer !== undefined) {
      writer.uint32(34).string(message.peer);
    }
    if (message.metadata !== undefined) {
      writer.uint32(42).string(message.metadata);
    }
    if (message.info !== undefined) {
      RoomInfo.encode(message.info, writer.uint32(50).fork()).ldelim();
    }
    if (message.bitrate !== 0) {
      writer.uint32(56).int32(message.bitrate);
    }
    if (message.features !== undefined) {
      Features.encode(message.features, writer.uint32(66).fork()).ldelim();
    }
    if (message.tracks !== undefined) {
      Tracks.encode(message.tracks, writer.uint32(74).fork()).ldelim();
    }
    if (message.sdp !== "") {
      writer.uint32(82).string(message.sdp);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ConnectRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConnectRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.token = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.version = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.room = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.peer = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.metadata = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.info = RoomInfo.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.bitrate = reader.int32() as any;
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.features = Features.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.tracks = Tracks.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.sdp = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConnectRequest {
    return {
      token: isSet(object.token) ? globalThis.String(object.token) : "",
      version: isSet(object.version) ? globalThis.String(object.version) : "",
      room: isSet(object.room) ? globalThis.String(object.room) : undefined,
      peer: isSet(object.peer) ? globalThis.String(object.peer) : undefined,
      metadata: isSet(object.metadata) ? globalThis.String(object.metadata) : undefined,
      info: isSet(object.info) ? RoomInfo.fromJSON(object.info) : undefined,
      bitrate: isSet(object.bitrate) ? bitrateControlModeFromJSON(object.bitrate) : 0,
      features: isSet(object.features) ? Features.fromJSON(object.features) : undefined,
      tracks: isSet(object.tracks) ? Tracks.fromJSON(object.tracks) : undefined,
      sdp: isSet(object.sdp) ? globalThis.String(object.sdp) : "",
    };
  },

  toJSON(message: ConnectRequest): unknown {
    const obj: any = {};
    if (message.token !== "") {
      obj.token = message.token;
    }
    if (message.version !== "") {
      obj.version = message.version;
    }
    if (message.room !== undefined) {
      obj.room = message.room;
    }
    if (message.peer !== undefined) {
      obj.peer = message.peer;
    }
    if (message.metadata !== undefined) {
      obj.metadata = message.metadata;
    }
    if (message.info !== undefined) {
      obj.info = RoomInfo.toJSON(message.info);
    }
    if (message.bitrate !== 0) {
      obj.bitrate = bitrateControlModeToJSON(message.bitrate);
    }
    if (message.features !== undefined) {
      obj.features = Features.toJSON(message.features);
    }
    if (message.tracks !== undefined) {
      obj.tracks = Tracks.toJSON(message.tracks);
    }
    if (message.sdp !== "") {
      obj.sdp = message.sdp;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConnectRequest>, I>>(base?: I): ConnectRequest {
    return ConnectRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConnectRequest>, I>>(object: I): ConnectRequest {
    const message = createBaseConnectRequest();
    message.token = object.token ?? "";
    message.version = object.version ?? "";
    message.room = object.room ?? undefined;
    message.peer = object.peer ?? undefined;
    message.metadata = object.metadata ?? undefined;
    message.info = (object.info !== undefined && object.info !== null) ? RoomInfo.fromPartial(object.info) : undefined;
    message.bitrate = object.bitrate ?? 0;
    message.features = (object.features !== undefined && object.features !== null)
      ? Features.fromPartial(object.features)
      : undefined;
    message.tracks = (object.tracks !== undefined && object.tracks !== null)
      ? Tracks.fromPartial(object.tracks)
      : undefined;
    message.sdp = object.sdp ?? "";
    return message;
  },
};

function createBaseConnectResponse(): ConnectResponse {
  return { connId: "", sdp: "" };
}

export const ConnectResponse = {
  encode(message: ConnectResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.connId !== "") {
      writer.uint32(10).string(message.connId);
    }
    if (message.sdp !== "") {
      writer.uint32(18).string(message.sdp);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ConnectResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConnectResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.connId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.sdp = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConnectResponse {
    return {
      connId: isSet(object.connId) ? globalThis.String(object.connId) : "",
      sdp: isSet(object.sdp) ? globalThis.String(object.sdp) : "",
    };
  },

  toJSON(message: ConnectResponse): unknown {
    const obj: any = {};
    if (message.connId !== "") {
      obj.connId = message.connId;
    }
    if (message.sdp !== "") {
      obj.sdp = message.sdp;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConnectResponse>, I>>(base?: I): ConnectResponse {
    return ConnectResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConnectResponse>, I>>(object: I): ConnectResponse {
    const message = createBaseConnectResponse();
    message.connId = object.connId ?? "";
    message.sdp = object.sdp ?? "";
    return message;
  },
};

function createBaseRemoteIceRequest(): RemoteIceRequest {
  return { connId: "", candidate: "" };
}

export const RemoteIceRequest = {
  encode(message: RemoteIceRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.connId !== "") {
      writer.uint32(10).string(message.connId);
    }
    if (message.candidate !== "") {
      writer.uint32(18).string(message.candidate);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoteIceRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoteIceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.connId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.candidate = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoteIceRequest {
    return {
      connId: isSet(object.connId) ? globalThis.String(object.connId) : "",
      candidate: isSet(object.candidate) ? globalThis.String(object.candidate) : "",
    };
  },

  toJSON(message: RemoteIceRequest): unknown {
    const obj: any = {};
    if (message.connId !== "") {
      obj.connId = message.connId;
    }
    if (message.candidate !== "") {
      obj.candidate = message.candidate;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoteIceRequest>, I>>(base?: I): RemoteIceRequest {
    return RemoteIceRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoteIceRequest>, I>>(object: I): RemoteIceRequest {
    const message = createBaseRemoteIceRequest();
    message.connId = object.connId ?? "";
    message.candidate = object.candidate ?? "";
    return message;
  },
};

function createBaseRemoteIceRespone(): RemoteIceRespone {
  return { candidates: [] };
}

export const RemoteIceRespone = {
  encode(message: RemoteIceRespone, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.candidates) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoteIceRespone {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoteIceRespone();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.candidates.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoteIceRespone {
    return {
      candidates: globalThis.Array.isArray(object?.candidates)
        ? object.candidates.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: RemoteIceRespone): unknown {
    const obj: any = {};
    if (message.candidates?.length) {
      obj.candidates = message.candidates;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoteIceRespone>, I>>(base?: I): RemoteIceRespone {
    return RemoteIceRespone.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoteIceRespone>, I>>(object: I): RemoteIceRespone {
    const message = createBaseRemoteIceRespone();
    message.candidates = object.candidates?.map((e) => e) || [];
    return message;
  },
};

export interface Gateway {
  Connect(request: DeepPartial<ConnectRequest>, metadata?: grpc.Metadata): Promise<ConnectResponse>;
  RemoteIce(request: DeepPartial<RemoteIceRequest>, metadata?: grpc.Metadata): Promise<RemoteIceRespone>;
  RestartIce(request: DeepPartial<ConnectRequest>, metadata?: grpc.Metadata): Promise<ConnectResponse>;
}

export class GatewayClientImpl implements Gateway {
  private readonly rpc: Rpc;

  constructor(rpc: Rpc) {
    this.rpc = rpc;
    this.Connect = this.Connect.bind(this);
    this.RemoteIce = this.RemoteIce.bind(this);
    this.RestartIce = this.RestartIce.bind(this);
  }

  Connect(request: DeepPartial<ConnectRequest>, metadata?: grpc.Metadata): Promise<ConnectResponse> {
    return this.rpc.unary(GatewayConnectDesc, ConnectRequest.fromPartial(request), metadata);
  }

  RemoteIce(request: DeepPartial<RemoteIceRequest>, metadata?: grpc.Metadata): Promise<RemoteIceRespone> {
    return this.rpc.unary(GatewayRemoteIceDesc, RemoteIceRequest.fromPartial(request), metadata);
  }

  RestartIce(request: DeepPartial<ConnectRequest>, metadata?: grpc.Metadata): Promise<ConnectResponse> {
    return this.rpc.unary(GatewayRestartIceDesc, ConnectRequest.fromPartial(request), metadata);
  }
}

export const GatewayDesc = { serviceName: "gateway.Gateway" };

export const GatewayConnectDesc: UnaryMethodDefinitionish = {
  methodName: "Connect",
  service: GatewayDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ConnectRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ConnectResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const GatewayRemoteIceDesc: UnaryMethodDefinitionish = {
  methodName: "RemoteIce",
  service: GatewayDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return RemoteIceRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = RemoteIceRespone.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const GatewayRestartIceDesc: UnaryMethodDefinitionish = {
  methodName: "RestartIce",
  service: GatewayDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ConnectRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ConnectResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
  requestStream: any;
  responseStream: any;
}

type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;

interface Rpc {
  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any>;
}

export class GrpcWebImpl {
  private host: string;
  private options: {
    transport?: grpc.TransportFactory;

    debug?: boolean;
    metadata?: grpc.Metadata;
    upStreamRetryCodes?: number[];
  };

  constructor(
    host: string,
    options: {
      transport?: grpc.TransportFactory;

      debug?: boolean;
      metadata?: grpc.Metadata;
      upStreamRetryCodes?: number[];
    },
  ) {
    this.host = host;
    this.options = options;
  }

  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    _request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any> {
    const request = { ..._request, ...methodDesc.requestType };
    const maybeCombinedMetadata = metadata && this.options.metadata
      ? new BrowserHeaders({ ...this.options?.metadata.headersMap, ...metadata?.headersMap })
      : metadata ?? this.options.metadata;
    return new Promise((resolve, reject) => {
      grpc.unary(methodDesc, {
        request,
        host: this.host,
        metadata: maybeCombinedMetadata ?? {},
        ...(this.options.transport !== undefined ? { transport: this.options.transport } : {}),
        debug: this.options.debug ?? false,
        onEnd: function (response) {
          if (response.status === grpc.Code.OK) {
            resolve(response.message!.toObject());
          } else {
            const err = new GrpcWebError(response.statusMessage, response.status, response.trailers);
            reject(err);
          }
        },
      });
    });
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export class GrpcWebError extends globalThis.Error {
  constructor(message: string, public code: grpc.Code, public metadata: grpc.Metadata) {
    super(message);
  }
}
