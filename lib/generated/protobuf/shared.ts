// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.174.0
//   protoc               v4.25.1
// source: shared.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";

export const protobufPackage = "shared";

export enum Kind {
  AUDIO = 0,
  VIDEO = 1,
  UNRECOGNIZED = -1,
}

export function kindFromJSON(object: any): Kind {
  switch (object) {
    case 0:
    case "AUDIO":
      return Kind.AUDIO;
    case 1:
    case "VIDEO":
      return Kind.VIDEO;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Kind.UNRECOGNIZED;
  }
}

export function kindToJSON(object: Kind): string {
  switch (object) {
    case Kind.AUDIO:
      return "AUDIO";
    case Kind.VIDEO:
      return "VIDEO";
    case Kind.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum BitrateControlMode {
  MAX_BITRATE = 0,
  DYNAMIC_CONSUMERS = 1,
  UNRECOGNIZED = -1,
}

export function bitrateControlModeFromJSON(object: any): BitrateControlMode {
  switch (object) {
    case 0:
    case "MAX_BITRATE":
      return BitrateControlMode.MAX_BITRATE;
    case 1:
    case "DYNAMIC_CONSUMERS":
      return BitrateControlMode.DYNAMIC_CONSUMERS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BitrateControlMode.UNRECOGNIZED;
  }
}

export function bitrateControlModeToJSON(object: BitrateControlMode): string {
  switch (object) {
    case BitrateControlMode.MAX_BITRATE:
      return "MAX_BITRATE";
    case BitrateControlMode.DYNAMIC_CONSUMERS:
      return "DYNAMIC_CONSUMERS";
    case BitrateControlMode.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Receiver {
  kind: Kind;
  id: string;
  state?: Receiver_State | undefined;
}

export interface Receiver_Source {
  peer: string;
  track: string;
}

export interface Receiver_Limit {
  priority: number;
  maxSpatial: number;
  maxTemporal: number;
  minSpatial?: number | undefined;
  minTemporal?: number | undefined;
}

export interface Receiver_State {
  source?: Receiver_Source | undefined;
  limit?: Receiver_Limit | undefined;
}

export interface Sender {
  kind: Kind;
  id: string;
  state?: Sender_State | undefined;
}

export interface Sender_Source {
  id: string;
  screen: boolean;
}

export interface Sender_State {
  source?: Sender_Source | undefined;
  priority?: number | undefined;
}

export interface Tracks {
  receivers: Receiver[];
  senders: Sender[];
}

export interface RoomInfoPublish {
  room: boolean;
  peer: boolean;
}

export interface RoomInfoSubscribe {
  room: boolean;
  peer: boolean;
}

export interface RoomInfo {
  publish: RoomInfoPublish | undefined;
  subscribe: RoomInfoSubscribe | undefined;
}

export interface Error {
  code: number;
  message: string;
}

function createBaseReceiver(): Receiver {
  return { kind: 0, id: "", state: undefined };
}

export const Receiver = {
  encode(message: Receiver, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.kind !== 0) {
      writer.uint32(8).int32(message.kind);
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    if (message.state !== undefined) {
      Receiver_State.encode(message.state, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Receiver {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReceiver();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.kind = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.state = Receiver_State.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Receiver {
    return {
      kind: isSet(object.kind) ? kindFromJSON(object.kind) : 0,
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      state: isSet(object.state) ? Receiver_State.fromJSON(object.state) : undefined,
    };
  },

  toJSON(message: Receiver): unknown {
    const obj: any = {};
    if (message.kind !== 0) {
      obj.kind = kindToJSON(message.kind);
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.state !== undefined) {
      obj.state = Receiver_State.toJSON(message.state);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Receiver>, I>>(base?: I): Receiver {
    return Receiver.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Receiver>, I>>(object: I): Receiver {
    const message = createBaseReceiver();
    message.kind = object.kind ?? 0;
    message.id = object.id ?? "";
    message.state = (object.state !== undefined && object.state !== null)
      ? Receiver_State.fromPartial(object.state)
      : undefined;
    return message;
  },
};

function createBaseReceiver_Source(): Receiver_Source {
  return { peer: "", track: "" };
}

export const Receiver_Source = {
  encode(message: Receiver_Source, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.peer !== "") {
      writer.uint32(10).string(message.peer);
    }
    if (message.track !== "") {
      writer.uint32(18).string(message.track);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Receiver_Source {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReceiver_Source();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.peer = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.track = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Receiver_Source {
    return {
      peer: isSet(object.peer) ? globalThis.String(object.peer) : "",
      track: isSet(object.track) ? globalThis.String(object.track) : "",
    };
  },

  toJSON(message: Receiver_Source): unknown {
    const obj: any = {};
    if (message.peer !== "") {
      obj.peer = message.peer;
    }
    if (message.track !== "") {
      obj.track = message.track;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Receiver_Source>, I>>(base?: I): Receiver_Source {
    return Receiver_Source.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Receiver_Source>, I>>(object: I): Receiver_Source {
    const message = createBaseReceiver_Source();
    message.peer = object.peer ?? "";
    message.track = object.track ?? "";
    return message;
  },
};

function createBaseReceiver_Limit(): Receiver_Limit {
  return { priority: 0, maxSpatial: 0, maxTemporal: 0, minSpatial: undefined, minTemporal: undefined };
}

export const Receiver_Limit = {
  encode(message: Receiver_Limit, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.priority !== 0) {
      writer.uint32(8).uint32(message.priority);
    }
    if (message.maxSpatial !== 0) {
      writer.uint32(16).uint32(message.maxSpatial);
    }
    if (message.maxTemporal !== 0) {
      writer.uint32(24).uint32(message.maxTemporal);
    }
    if (message.minSpatial !== undefined) {
      writer.uint32(32).uint32(message.minSpatial);
    }
    if (message.minTemporal !== undefined) {
      writer.uint32(40).uint32(message.minTemporal);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Receiver_Limit {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReceiver_Limit();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.priority = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.maxSpatial = reader.uint32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.maxTemporal = reader.uint32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.minSpatial = reader.uint32();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.minTemporal = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Receiver_Limit {
    return {
      priority: isSet(object.priority) ? globalThis.Number(object.priority) : 0,
      maxSpatial: isSet(object.maxSpatial) ? globalThis.Number(object.maxSpatial) : 0,
      maxTemporal: isSet(object.maxTemporal) ? globalThis.Number(object.maxTemporal) : 0,
      minSpatial: isSet(object.minSpatial) ? globalThis.Number(object.minSpatial) : undefined,
      minTemporal: isSet(object.minTemporal) ? globalThis.Number(object.minTemporal) : undefined,
    };
  },

  toJSON(message: Receiver_Limit): unknown {
    const obj: any = {};
    if (message.priority !== 0) {
      obj.priority = Math.round(message.priority);
    }
    if (message.maxSpatial !== 0) {
      obj.maxSpatial = Math.round(message.maxSpatial);
    }
    if (message.maxTemporal !== 0) {
      obj.maxTemporal = Math.round(message.maxTemporal);
    }
    if (message.minSpatial !== undefined) {
      obj.minSpatial = Math.round(message.minSpatial);
    }
    if (message.minTemporal !== undefined) {
      obj.minTemporal = Math.round(message.minTemporal);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Receiver_Limit>, I>>(base?: I): Receiver_Limit {
    return Receiver_Limit.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Receiver_Limit>, I>>(object: I): Receiver_Limit {
    const message = createBaseReceiver_Limit();
    message.priority = object.priority ?? 0;
    message.maxSpatial = object.maxSpatial ?? 0;
    message.maxTemporal = object.maxTemporal ?? 0;
    message.minSpatial = object.minSpatial ?? undefined;
    message.minTemporal = object.minTemporal ?? undefined;
    return message;
  },
};

function createBaseReceiver_State(): Receiver_State {
  return { source: undefined, limit: undefined };
}

export const Receiver_State = {
  encode(message: Receiver_State, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.source !== undefined) {
      Receiver_Source.encode(message.source, writer.uint32(10).fork()).ldelim();
    }
    if (message.limit !== undefined) {
      Receiver_Limit.encode(message.limit, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Receiver_State {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReceiver_State();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.source = Receiver_Source.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.limit = Receiver_Limit.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Receiver_State {
    return {
      source: isSet(object.source) ? Receiver_Source.fromJSON(object.source) : undefined,
      limit: isSet(object.limit) ? Receiver_Limit.fromJSON(object.limit) : undefined,
    };
  },

  toJSON(message: Receiver_State): unknown {
    const obj: any = {};
    if (message.source !== undefined) {
      obj.source = Receiver_Source.toJSON(message.source);
    }
    if (message.limit !== undefined) {
      obj.limit = Receiver_Limit.toJSON(message.limit);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Receiver_State>, I>>(base?: I): Receiver_State {
    return Receiver_State.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Receiver_State>, I>>(object: I): Receiver_State {
    const message = createBaseReceiver_State();
    message.source = (object.source !== undefined && object.source !== null)
      ? Receiver_Source.fromPartial(object.source)
      : undefined;
    message.limit = (object.limit !== undefined && object.limit !== null)
      ? Receiver_Limit.fromPartial(object.limit)
      : undefined;
    return message;
  },
};

function createBaseSender(): Sender {
  return { kind: 0, id: "", state: undefined };
}

export const Sender = {
  encode(message: Sender, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.kind !== 0) {
      writer.uint32(8).int32(message.kind);
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    if (message.state !== undefined) {
      Sender_State.encode(message.state, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Sender {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSender();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.kind = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.state = Sender_State.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Sender {
    return {
      kind: isSet(object.kind) ? kindFromJSON(object.kind) : 0,
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      state: isSet(object.state) ? Sender_State.fromJSON(object.state) : undefined,
    };
  },

  toJSON(message: Sender): unknown {
    const obj: any = {};
    if (message.kind !== 0) {
      obj.kind = kindToJSON(message.kind);
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.state !== undefined) {
      obj.state = Sender_State.toJSON(message.state);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Sender>, I>>(base?: I): Sender {
    return Sender.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Sender>, I>>(object: I): Sender {
    const message = createBaseSender();
    message.kind = object.kind ?? 0;
    message.id = object.id ?? "";
    message.state = (object.state !== undefined && object.state !== null)
      ? Sender_State.fromPartial(object.state)
      : undefined;
    return message;
  },
};

function createBaseSender_Source(): Sender_Source {
  return { id: "", screen: false };
}

export const Sender_Source = {
  encode(message: Sender_Source, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.screen !== false) {
      writer.uint32(16).bool(message.screen);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Sender_Source {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSender_Source();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.screen = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Sender_Source {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      screen: isSet(object.screen) ? globalThis.Boolean(object.screen) : false,
    };
  },

  toJSON(message: Sender_Source): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.screen !== false) {
      obj.screen = message.screen;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Sender_Source>, I>>(base?: I): Sender_Source {
    return Sender_Source.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Sender_Source>, I>>(object: I): Sender_Source {
    const message = createBaseSender_Source();
    message.id = object.id ?? "";
    message.screen = object.screen ?? false;
    return message;
  },
};

function createBaseSender_State(): Sender_State {
  return { source: undefined, priority: undefined };
}

export const Sender_State = {
  encode(message: Sender_State, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.source !== undefined) {
      Sender_Source.encode(message.source, writer.uint32(10).fork()).ldelim();
    }
    if (message.priority !== undefined) {
      writer.uint32(16).uint32(message.priority);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Sender_State {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSender_State();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.source = Sender_Source.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.priority = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Sender_State {
    return {
      source: isSet(object.source) ? Sender_Source.fromJSON(object.source) : undefined,
      priority: isSet(object.priority) ? globalThis.Number(object.priority) : undefined,
    };
  },

  toJSON(message: Sender_State): unknown {
    const obj: any = {};
    if (message.source !== undefined) {
      obj.source = Sender_Source.toJSON(message.source);
    }
    if (message.priority !== undefined) {
      obj.priority = Math.round(message.priority);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Sender_State>, I>>(base?: I): Sender_State {
    return Sender_State.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Sender_State>, I>>(object: I): Sender_State {
    const message = createBaseSender_State();
    message.source = (object.source !== undefined && object.source !== null)
      ? Sender_Source.fromPartial(object.source)
      : undefined;
    message.priority = object.priority ?? undefined;
    return message;
  },
};

function createBaseTracks(): Tracks {
  return { receivers: [], senders: [] };
}

export const Tracks = {
  encode(message: Tracks, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.receivers) {
      Receiver.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.senders) {
      Sender.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Tracks {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTracks();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.receivers.push(Receiver.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.senders.push(Sender.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Tracks {
    return {
      receivers: globalThis.Array.isArray(object?.receivers)
        ? object.receivers.map((e: any) => Receiver.fromJSON(e))
        : [],
      senders: globalThis.Array.isArray(object?.senders) ? object.senders.map((e: any) => Sender.fromJSON(e)) : [],
    };
  },

  toJSON(message: Tracks): unknown {
    const obj: any = {};
    if (message.receivers?.length) {
      obj.receivers = message.receivers.map((e) => Receiver.toJSON(e));
    }
    if (message.senders?.length) {
      obj.senders = message.senders.map((e) => Sender.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Tracks>, I>>(base?: I): Tracks {
    return Tracks.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Tracks>, I>>(object: I): Tracks {
    const message = createBaseTracks();
    message.receivers = object.receivers?.map((e) => Receiver.fromPartial(e)) || [];
    message.senders = object.senders?.map((e) => Sender.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRoomInfoPublish(): RoomInfoPublish {
  return { room: false, peer: false };
}

export const RoomInfoPublish = {
  encode(message: RoomInfoPublish, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.room !== false) {
      writer.uint32(8).bool(message.room);
    }
    if (message.peer !== false) {
      writer.uint32(16).bool(message.peer);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RoomInfoPublish {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRoomInfoPublish();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.room = reader.bool();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.peer = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RoomInfoPublish {
    return {
      room: isSet(object.room) ? globalThis.Boolean(object.room) : false,
      peer: isSet(object.peer) ? globalThis.Boolean(object.peer) : false,
    };
  },

  toJSON(message: RoomInfoPublish): unknown {
    const obj: any = {};
    if (message.room !== false) {
      obj.room = message.room;
    }
    if (message.peer !== false) {
      obj.peer = message.peer;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RoomInfoPublish>, I>>(base?: I): RoomInfoPublish {
    return RoomInfoPublish.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RoomInfoPublish>, I>>(object: I): RoomInfoPublish {
    const message = createBaseRoomInfoPublish();
    message.room = object.room ?? false;
    message.peer = object.peer ?? false;
    return message;
  },
};

function createBaseRoomInfoSubscribe(): RoomInfoSubscribe {
  return { room: false, peer: false };
}

export const RoomInfoSubscribe = {
  encode(message: RoomInfoSubscribe, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.room !== false) {
      writer.uint32(8).bool(message.room);
    }
    if (message.peer !== false) {
      writer.uint32(16).bool(message.peer);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RoomInfoSubscribe {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRoomInfoSubscribe();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.room = reader.bool();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.peer = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RoomInfoSubscribe {
    return {
      room: isSet(object.room) ? globalThis.Boolean(object.room) : false,
      peer: isSet(object.peer) ? globalThis.Boolean(object.peer) : false,
    };
  },

  toJSON(message: RoomInfoSubscribe): unknown {
    const obj: any = {};
    if (message.room !== false) {
      obj.room = message.room;
    }
    if (message.peer !== false) {
      obj.peer = message.peer;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RoomInfoSubscribe>, I>>(base?: I): RoomInfoSubscribe {
    return RoomInfoSubscribe.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RoomInfoSubscribe>, I>>(object: I): RoomInfoSubscribe {
    const message = createBaseRoomInfoSubscribe();
    message.room = object.room ?? false;
    message.peer = object.peer ?? false;
    return message;
  },
};

function createBaseRoomInfo(): RoomInfo {
  return { publish: undefined, subscribe: undefined };
}

export const RoomInfo = {
  encode(message: RoomInfo, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.publish !== undefined) {
      RoomInfoPublish.encode(message.publish, writer.uint32(10).fork()).ldelim();
    }
    if (message.subscribe !== undefined) {
      RoomInfoSubscribe.encode(message.subscribe, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RoomInfo {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRoomInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.publish = RoomInfoPublish.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.subscribe = RoomInfoSubscribe.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RoomInfo {
    return {
      publish: isSet(object.publish) ? RoomInfoPublish.fromJSON(object.publish) : undefined,
      subscribe: isSet(object.subscribe) ? RoomInfoSubscribe.fromJSON(object.subscribe) : undefined,
    };
  },

  toJSON(message: RoomInfo): unknown {
    const obj: any = {};
    if (message.publish !== undefined) {
      obj.publish = RoomInfoPublish.toJSON(message.publish);
    }
    if (message.subscribe !== undefined) {
      obj.subscribe = RoomInfoSubscribe.toJSON(message.subscribe);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RoomInfo>, I>>(base?: I): RoomInfo {
    return RoomInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RoomInfo>, I>>(object: I): RoomInfo {
    const message = createBaseRoomInfo();
    message.publish = (object.publish !== undefined && object.publish !== null)
      ? RoomInfoPublish.fromPartial(object.publish)
      : undefined;
    message.subscribe = (object.subscribe !== undefined && object.subscribe !== null)
      ? RoomInfoSubscribe.fromPartial(object.subscribe)
      : undefined;
    return message;
  },
};

function createBaseError(): Error {
  return { code: 0, message: "" };
}

export const Error = {
  encode(message: Error, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.code !== 0) {
      writer.uint32(8).uint32(message.code);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Error {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseError();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.code = reader.uint32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Error {
    return {
      code: isSet(object.code) ? globalThis.Number(object.code) : 0,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: Error): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = Math.round(message.code);
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Error>, I>>(base?: I): Error {
    return Error.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Error>, I>>(object: I): Error {
    const message = createBaseError();
    message.code = object.code ?? 0;
    message.message = object.message ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
